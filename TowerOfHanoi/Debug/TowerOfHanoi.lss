
TowerOfHanoi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00001676  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000be  008000be  00001768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f34  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000343  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fd  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002aa  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f3  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_1>
       8:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_2>
       c:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_3>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__vector_3+0x6>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e6 e7       	ldi	r30, 0x76	; 118
      ea:	f6 e1       	ldi	r31, 0x16	; 22
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 3b       	cpi	r26, 0xBE	; 190
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	ae eb       	ldi	r26, 0xBE	; 190
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a0 3d       	cpi	r26, 0xD0	; 208
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 d3 05 	call	0xba6	; 0xba6 <main>
     10c:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <createStack>:
	int *array;
};

// function to create a stack of given capacity.
struct Stack* createStack(unsigned capacity)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	8c 01       	movw	r16, r24
	struct Stack* stack =
     11e:	86 e0       	ldi	r24, 0x06	; 6
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 0c 0a 	call	0x1418	; 0x1418 <malloc>
     126:	ec 01       	movw	r28, r24
	(struct Stack*) malloc(sizeof(struct Stack));
	stack -> capacity = capacity;
     128:	19 83       	std	Y+1, r17	; 0x01
     12a:	08 83       	st	Y, r16
	stack -> top = -1;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	9f ef       	ldi	r25, 0xFF	; 255
     130:	9b 83       	std	Y+3, r25	; 0x03
     132:	8a 83       	std	Y+2, r24	; 0x02
	stack -> array =
	(int*) malloc(stack -> capacity * sizeof(int));
     134:	c8 01       	movw	r24, r16
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <malloc>
{
	struct Stack* stack =
	(struct Stack*) malloc(sizeof(struct Stack));
	stack -> capacity = capacity;
	stack -> top = -1;
	stack -> array =
     13e:	9d 83       	std	Y+5, r25	; 0x05
     140:	8c 83       	std	Y+4, r24	; 0x04
	(int*) malloc(stack -> capacity * sizeof(int));
	return stack;
}
     142:	ce 01       	movw	r24, r28
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <push>:
}

// Function to add an item to stack.  It increases
// top by 1
void push(struct Stack *stack, int item)
{
     14e:	dc 01       	movw	r26, r24
}

// Stack is full when top is equal to the last index
int isFull(struct Stack* stack)
{
	return (stack->top == stack->capacity - 1);
     150:	12 96       	adiw	r26, 0x02	; 2
     152:	2d 91       	ld	r18, X+
     154:	3c 91       	ld	r19, X
     156:	13 97       	sbiw	r26, 0x03	; 3
     158:	8d 91       	ld	r24, X+
     15a:	9c 91       	ld	r25, X
     15c:	11 97       	sbiw	r26, 0x01	; 1
     15e:	01 97       	sbiw	r24, 0x01	; 1

// Function to add an item to stack.  It increases
// top by 1
void push(struct Stack *stack, int item)
{
	if (isFull(stack))
     160:	28 17       	cp	r18, r24
     162:	39 07       	cpc	r19, r25
     164:	81 f0       	breq	.+32     	; 0x186 <push+0x38>
	return;
	stack -> array[++stack -> top] = item;
     166:	14 96       	adiw	r26, 0x04	; 4
     168:	ed 91       	ld	r30, X+
     16a:	fc 91       	ld	r31, X
     16c:	15 97       	sbiw	r26, 0x05	; 5
     16e:	2f 5f       	subi	r18, 0xFF	; 255
     170:	3f 4f       	sbci	r19, 0xFF	; 255
     172:	13 96       	adiw	r26, 0x03	; 3
     174:	3c 93       	st	X, r19
     176:	2e 93       	st	-X, r18
     178:	12 97       	sbiw	r26, 0x02	; 2
     17a:	22 0f       	add	r18, r18
     17c:	33 1f       	adc	r19, r19
     17e:	e2 0f       	add	r30, r18
     180:	f3 1f       	adc	r31, r19
     182:	71 83       	std	Z+1, r23	; 0x01
     184:	60 83       	st	Z, r22
     186:	08 95       	ret

00000188 <pop>:
}

// Function to remove an item from stack.  It
// decreases top by 1
int pop(struct Stack* stack)
{
     188:	dc 01       	movw	r26, r24
}

// Stack is empty when top is equal to -1
int isEmpty(struct Stack* stack)
{
	return (stack->top == -1);
     18a:	12 96       	adiw	r26, 0x02	; 2
     18c:	2d 91       	ld	r18, X+
     18e:	3c 91       	ld	r19, X
     190:	13 97       	sbiw	r26, 0x03	; 3

// Function to remove an item from stack.  It
// decreases top by 1
int pop(struct Stack* stack)
{
	if (isEmpty(stack))
     192:	2f 3f       	cpi	r18, 0xFF	; 255
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	38 07       	cpc	r19, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <pop+0x32>
	return INT_MIN;
	return stack -> array[stack -> top--];
     19a:	14 96       	adiw	r26, 0x04	; 4
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	15 97       	sbiw	r26, 0x05	; 5
     1a2:	c9 01       	movw	r24, r18
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	13 96       	adiw	r26, 0x03	; 3
     1a8:	9c 93       	st	X, r25
     1aa:	8e 93       	st	-X, r24
     1ac:	12 97       	sbiw	r26, 0x02	; 2
     1ae:	22 0f       	add	r18, r18
     1b0:	33 1f       	adc	r19, r19
     1b2:	e2 0f       	add	r30, r18
     1b4:	f3 1f       	adc	r31, r19
     1b6:	20 81       	ld	r18, Z
     1b8:	31 81       	ldd	r19, Z+1	; 0x01
}
     1ba:	c9 01       	movw	r24, r18
     1bc:	08 95       	ret

000001be <init>:
unsigned char g[14]={0,0,0,0,30,33,33,38,36,23,0,0,0,0};
unsigned char s[14]={0,0,0,0,0,18,41,37,18,0,0,0,0,0};
int top1=6,top2=7,cur,ret,dsk,fro,to,strt,sim;

void init()
{
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	e1 eb       	ldi	r30, 0xB1	; 177
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	83 ea       	ldi	r24, 0xA3	; 163
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	c5 e9       	ldi	r28, 0x95	; 149
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	67 e8       	ldi	r22, 0x87	; 135
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	4d eb       	ldi	r20, 0xBD	; 189
     1d4:	50 e0       	ldi	r21, 0x00	; 0
	for(int i=1;i<13;i++)
	{
		p1[i]=over[i];
     1d6:	21 91       	ld	r18, Z+
     1d8:	dc 01       	movw	r26, r24
     1da:	2d 93       	st	X+, r18
     1dc:	cd 01       	movw	r24, r26
		p2[i]=0;
     1de:	19 92       	st	Y+, r1
		p3[i]=0;
     1e0:	db 01       	movw	r26, r22
     1e2:	1d 92       	st	X+, r1
     1e4:	bd 01       	movw	r22, r26
unsigned char s[14]={0,0,0,0,0,18,41,37,18,0,0,0,0,0};
int top1=6,top2=7,cur,ret,dsk,fro,to,strt,sim;

void init()
{
	for(int i=1;i<13;i++)
     1e6:	e4 17       	cp	r30, r20
     1e8:	f5 07       	cpc	r31, r21
     1ea:	a9 f7       	brne	.-22     	; 0x1d6 <init+0x18>
	{
		p1[i]=over[i];
		p2[i]=0;
		p3[i]=0;
	}
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <showPeg1>:

void showPeg1()
{
     1f2:	e2 ea       	ldi	r30, 0xA2	; 162
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char cnt=0,k=0;
	for(int i=0;i<14;i++)
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(cur == 1 && (i == top1 || i == top2))
			PORTA=(1 << 7) | ((1 << p1[i])-1);
		else
			PORTA=(1 << p1[i])-1;
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	48 2f       	mov	r20, r24
void showPeg1()
{
	unsigned char cnt=0,k=0;
	for(int i=0;i<14;i++)
	{
		if(cur == 1 && (i == top1 || i == top2))
     200:	20 91 c6 00 	lds	r18, 0x00C6
     204:	30 91 c7 00 	lds	r19, 0x00C7
     208:	21 30       	cpi	r18, 0x01	; 1
     20a:	31 05       	cpc	r19, r1
     20c:	c9 f4       	brne	.+50     	; 0x240 <showPeg1+0x4e>
     20e:	20 91 68 00 	lds	r18, 0x0068
     212:	30 91 69 00 	lds	r19, 0x0069
     216:	82 17       	cp	r24, r18
     218:	93 07       	cpc	r25, r19
     21a:	39 f0       	breq	.+14     	; 0x22a <showPeg1+0x38>
     21c:	20 91 66 00 	lds	r18, 0x0066
     220:	30 91 67 00 	lds	r19, 0x0067
     224:	82 17       	cp	r24, r18
     226:	93 07       	cpc	r25, r19
     228:	59 f4       	brne	.+22     	; 0x240 <showPeg1+0x4e>
			PORTA=(1 << 7) | ((1 << p1[i])-1);
     22a:	9b 01       	movw	r18, r22
     22c:	00 80       	ld	r0, Z
     22e:	02 c0       	rjmp	.+4      	; 0x234 <showPeg1+0x42>
     230:	22 0f       	add	r18, r18
     232:	33 1f       	adc	r19, r19
     234:	0a 94       	dec	r0
     236:	e2 f7       	brpl	.-8      	; 0x230 <showPeg1+0x3e>
     238:	21 50       	subi	r18, 0x01	; 1
     23a:	20 68       	ori	r18, 0x80	; 128
     23c:	2b bb       	out	0x1b, r18	; 27
     23e:	09 c0       	rjmp	.+18     	; 0x252 <showPeg1+0x60>
		else
			PORTA=(1 << p1[i])-1;
     240:	9b 01       	movw	r18, r22
     242:	00 80       	ld	r0, Z
     244:	02 c0       	rjmp	.+4      	; 0x24a <showPeg1+0x58>
     246:	22 0f       	add	r18, r18
     248:	33 1f       	adc	r19, r19
     24a:	0a 94       	dec	r0
     24c:	e2 f7       	brpl	.-8      	; 0x246 <showPeg1+0x54>
     24e:	21 50       	subi	r18, 0x01	; 1
     250:	2b bb       	out	0x1b, r18	; 27
		PORTC=cnt+k;
     252:	45 bb       	out	0x15, r20	; 21
}

void showPeg1()
{
	unsigned char cnt=0,k=0;
	for(int i=0;i<14;i++)
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	31 96       	adiw	r30, 0x01	; 1
     258:	8e 30       	cpi	r24, 0x0E	; 14
     25a:	91 05       	cpc	r25, r1
     25c:	81 f6       	brne	.-96     	; 0x1fe <showPeg1+0xc>
		else
			PORTA=(1 << p1[i])-1;
		PORTC=cnt+k;
		k++;
	}
}
     25e:	08 95       	ret

00000260 <showPeg2>:
{
	unsigned char cnt=0,k=13;
	int j=0;
	for(int i=13;i<16;i++)
	{
		PORTA=(1 << p2[j++])-1;
     260:	e4 e9       	ldi	r30, 0x94	; 148
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9c 01       	movw	r18, r24
     26a:	00 80       	ld	r0, Z
     26c:	02 c0       	rjmp	.+4      	; 0x272 <showPeg2+0x12>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <showPeg2+0xe>
     276:	21 50       	subi	r18, 0x01	; 1
     278:	2b bb       	out	0x1b, r18	; 27
		PORTC=cnt+k;
     27a:	2d e0       	ldi	r18, 0x0D	; 13
     27c:	25 bb       	out	0x15, r18	; 21
{
	unsigned char cnt=0,k=13;
	int j=0;
	for(int i=13;i<16;i++)
	{
		PORTA=(1 << p2[j++])-1;
     27e:	9c 01       	movw	r18, r24
     280:	01 80       	ldd	r0, Z+1	; 0x01
     282:	02 c0       	rjmp	.+4      	; 0x288 <showPeg2+0x28>
     284:	22 0f       	add	r18, r18
     286:	33 1f       	adc	r19, r19
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <showPeg2+0x24>
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	2b bb       	out	0x1b, r18	; 27
		PORTC=cnt+k;
     290:	2e e0       	ldi	r18, 0x0E	; 14
     292:	25 bb       	out	0x15, r18	; 21
{
	unsigned char cnt=0,k=13;
	int j=0;
	for(int i=13;i<16;i++)
	{
		PORTA=(1 << p2[j++])-1;
     294:	02 80       	ldd	r0, Z+2	; 0x02
     296:	02 c0       	rjmp	.+4      	; 0x29c <showPeg2+0x3c>
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	0a 94       	dec	r0
     29e:	e2 f7       	brpl	.-8      	; 0x298 <showPeg2+0x38>
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	8b bb       	out	0x1b, r24	; 27
		PORTC=cnt+k;
     2a4:	8f e0       	ldi	r24, 0x0F	; 15
     2a6:	85 bb       	out	0x15, r24	; 21
     2a8:	e7 e9       	ldi	r30, 0x97	; 151
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<11;i++)
	{
		if(cur == 2 && (i == 3 || i == 4))
			PORTA=(1 << 7) | ((1 << p2[j++])-1);
		else
			PORTA=(1 << p2[j++])-1;
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	50 e0       	ldi	r21, 0x00	; 0
		k++;
	}
	cnt=1<<4,k=0;
	for(int i=0;i<11;i++)
	{
		if(cur == 2 && (i == 3 || i == 4))
     2b4:	20 91 c6 00 	lds	r18, 0x00C6
     2b8:	30 91 c7 00 	lds	r19, 0x00C7
     2bc:	22 30       	cpi	r18, 0x02	; 2
     2be:	31 05       	cpc	r19, r1
     2c0:	89 f4       	brne	.+34     	; 0x2e4 <showPeg2+0x84>
     2c2:	9c 01       	movw	r18, r24
     2c4:	27 50       	subi	r18, 0x07	; 7
     2c6:	31 09       	sbc	r19, r1
     2c8:	22 30       	cpi	r18, 0x02	; 2
     2ca:	31 05       	cpc	r19, r1
     2cc:	58 f4       	brcc	.+22     	; 0x2e4 <showPeg2+0x84>
			PORTA=(1 << 7) | ((1 << p2[j++])-1);
     2ce:	9a 01       	movw	r18, r20
     2d0:	00 80       	ld	r0, Z
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <showPeg2+0x78>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <showPeg2+0x74>
     2dc:	21 50       	subi	r18, 0x01	; 1
     2de:	20 68       	ori	r18, 0x80	; 128
     2e0:	2b bb       	out	0x1b, r18	; 27
     2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <showPeg2+0x96>
		else
			PORTA=(1 << p2[j++])-1;
     2e4:	9a 01       	movw	r18, r20
     2e6:	00 80       	ld	r0, Z
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <showPeg2+0x8e>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <showPeg2+0x8a>
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	2b bb       	out	0x1b, r18	; 27
     2f6:	2c e0       	ldi	r18, 0x0C	; 12
     2f8:	28 0f       	add	r18, r24
		PORTC=cnt+k;
     2fa:	25 bb       	out	0x15, r18	; 21
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	31 96       	adiw	r30, 0x01	; 1
		PORTA=(1 << p2[j++])-1;
		PORTC=cnt+k;
		k++;
	}
	cnt=1<<4,k=0;
	for(int i=0;i<11;i++)
     300:	8f 30       	cpi	r24, 0x0F	; 15
     302:	91 05       	cpc	r25, r1
     304:	b9 f6       	brne	.-82     	; 0x2b4 <showPeg2+0x54>
		else
			PORTA=(1 << p2[j++])-1;
		PORTC=cnt+k;
		k++;
	}
}
     306:	08 95       	ret

00000308 <showPeg3>:

void showPeg3()
{
     308:	e6 e8       	ldi	r30, 0x86	; 134
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8a e1       	ldi	r24, 0x1A	; 26
	unsigned char cnt=1<<4,k=10;
	int j=0;
	for(int i=10;i<16;i++)
	{
		PORTA=(1 << p3[j++])-1;
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	9a 01       	movw	r18, r20
     314:	01 90       	ld	r0, Z+
     316:	02 c0       	rjmp	.+4      	; 0x31c <showPeg3+0x14>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <showPeg3+0x10>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	2b bb       	out	0x1b, r18	; 27
		PORTC=cnt+k;
     324:	85 bb       	out	0x15, r24	; 21
     326:	8f 5f       	subi	r24, 0xFF	; 255

void showPeg3()
{
	unsigned char cnt=1<<4,k=10;
	int j=0;
	for(int i=10;i<16;i++)
     328:	80 32       	cpi	r24, 0x20	; 32
     32a:	99 f7       	brne	.-26     	; 0x312 <showPeg3+0xa>
     32c:	ec e8       	ldi	r30, 0x8C	; 140
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<8;i++)
	{
		if(cur == 3 && (i == 0 || i == 1))
			PORTA=(1 << 7) | ((1 << p3[j++])-1);
		else
			PORTA=(1 << p3[j++])-1;
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	50 e0       	ldi	r21, 0x00	; 0
		k++;
	}
	cnt=1<<5,k=0;
	for(int i=0;i<8;i++)
	{
		if(cur == 3 && (i == 0 || i == 1))
     338:	20 91 c6 00 	lds	r18, 0x00C6
     33c:	30 91 c7 00 	lds	r19, 0x00C7
     340:	23 30       	cpi	r18, 0x03	; 3
     342:	31 05       	cpc	r19, r1
     344:	89 f4       	brne	.+34     	; 0x368 <showPeg3+0x60>
     346:	9c 01       	movw	r18, r24
     348:	27 50       	subi	r18, 0x07	; 7
     34a:	31 09       	sbc	r19, r1
     34c:	22 30       	cpi	r18, 0x02	; 2
     34e:	31 05       	cpc	r19, r1
     350:	58 f4       	brcc	.+22     	; 0x368 <showPeg3+0x60>
			PORTA=(1 << 7) | ((1 << p3[j++])-1);
     352:	9a 01       	movw	r18, r20
     354:	00 80       	ld	r0, Z
     356:	02 c0       	rjmp	.+4      	; 0x35c <showPeg3+0x54>
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	0a 94       	dec	r0
     35e:	e2 f7       	brpl	.-8      	; 0x358 <showPeg3+0x50>
     360:	21 50       	subi	r18, 0x01	; 1
     362:	20 68       	ori	r18, 0x80	; 128
     364:	2b bb       	out	0x1b, r18	; 27
     366:	09 c0       	rjmp	.+18     	; 0x37a <showPeg3+0x72>
		else
			PORTA=(1 << p3[j++])-1;
     368:	9a 01       	movw	r18, r20
     36a:	00 80       	ld	r0, Z
     36c:	02 c0       	rjmp	.+4      	; 0x372 <showPeg3+0x6a>
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	0a 94       	dec	r0
     374:	e2 f7       	brpl	.-8      	; 0x36e <showPeg3+0x66>
     376:	21 50       	subi	r18, 0x01	; 1
     378:	2b bb       	out	0x1b, r18	; 27
     37a:	29 e1       	ldi	r18, 0x19	; 25
     37c:	28 0f       	add	r18, r24
		PORTC=cnt+k;
     37e:	25 bb       	out	0x15, r18	; 21
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	31 96       	adiw	r30, 0x01	; 1
		PORTA=(1 << p3[j++])-1;
		PORTC=cnt+k;
		k++;
	}
	cnt=1<<5,k=0;
	for(int i=0;i<8;i++)
     384:	8f 30       	cpi	r24, 0x0F	; 15
     386:	91 05       	cpc	r25, r1
     388:	b9 f6       	brne	.-82     	; 0x338 <showPeg3+0x30>
		else
			PORTA=(1 << p3[j++])-1;
		PORTC=cnt+k;
		k++;
	}
}
     38a:	08 95       	ret

0000038c <showG>:

void showG()
{
     38c:	48 e7       	ldi	r20, 0x78	; 120
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	66 e8       	ldi	r22, 0x86	; 134
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	fa 01       	movw	r30, r20
     396:	aa ef       	ldi	r26, 0xFA	; 250
     398:	bf ef       	ldi	r27, 0xFF	; 255
     39a:	a4 1b       	sub	r26, r20
     39c:	b5 0b       	sbc	r27, r21
     39e:	8e 2f       	mov	r24, r30
     3a0:	84 1b       	sub	r24, r20
	unsigned char cnt=0,k=0;
	for(int i=0;i<14;i++)
	{
		if(cur == 1 && (i == 6 || i == 7))
     3a2:	20 91 c6 00 	lds	r18, 0x00C6
     3a6:	30 91 c7 00 	lds	r19, 0x00C7
     3aa:	21 30       	cpi	r18, 0x01	; 1
     3ac:	31 05       	cpc	r19, r1
     3ae:	51 f4       	brne	.+20     	; 0x3c4 <showG+0x38>
     3b0:	9d 01       	movw	r18, r26
     3b2:	2e 0f       	add	r18, r30
     3b4:	3f 1f       	adc	r19, r31
     3b6:	22 30       	cpi	r18, 0x02	; 2
     3b8:	31 05       	cpc	r19, r1
     3ba:	20 f4       	brcc	.+8      	; 0x3c4 <showG+0x38>
		{
			PORTA=(1 << 7) | g[i];
     3bc:	90 81       	ld	r25, Z
     3be:	90 68       	ori	r25, 0x80	; 128
     3c0:	9b bb       	out	0x1b, r25	; 27
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <showG+0x3c>
		}
		else
			PORTA=g[i];
     3c4:	90 81       	ld	r25, Z
     3c6:	9b bb       	out	0x1b, r25	; 27
		PORTC=cnt+k;
     3c8:	85 bb       	out	0x15, r24	; 21
     3ca:	31 96       	adiw	r30, 0x01	; 1
}

void showG()
{
	unsigned char cnt=0,k=0;
	for(int i=0;i<14;i++)
     3cc:	e6 17       	cp	r30, r22
     3ce:	f7 07       	cpc	r31, r23
     3d0:	31 f7       	brne	.-52     	; 0x39e <showG+0x12>
		else
			PORTA=g[i];
		PORTC=cnt+k;
		k++;
	}
}
     3d2:	08 95       	ret

000003d4 <showS>:

void showS()
{
     3d4:	ea e6       	ldi	r30, 0x6A	; 106
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	8a e1       	ldi	r24, 0x1A	; 26
	unsigned char cnt=1<<4,k=10;
	int j=0;
	for(int i=10;i<16;i++)
	{
		PORTA=s[j++];
     3da:	91 91       	ld	r25, Z+
     3dc:	9b bb       	out	0x1b, r25	; 27
		PORTC=cnt+k;
     3de:	85 bb       	out	0x15, r24	; 21
     3e0:	8f 5f       	subi	r24, 0xFF	; 255

void showS()
{
	unsigned char cnt=1<<4,k=10;
	int j=0;
	for(int i=10;i<16;i++)
     3e2:	80 32       	cpi	r24, 0x20	; 32
     3e4:	d1 f7       	brne	.-12     	; 0x3da <showS+0x6>
     3e6:	e0 e7       	ldi	r30, 0x70	; 112
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	90 e0       	ldi	r25, 0x00	; 0
		k++;
	}
	cnt=1<<5,k=0;
	for(int i=0;i<8;i++)
	{
		if(cur == 3 && (i == 0 || i == 1))
     3ee:	20 91 c6 00 	lds	r18, 0x00C6
     3f2:	30 91 c7 00 	lds	r19, 0x00C7
     3f6:	23 30       	cpi	r18, 0x03	; 3
     3f8:	31 05       	cpc	r19, r1
     3fa:	51 f4       	brne	.+20     	; 0x410 <showS+0x3c>
     3fc:	9c 01       	movw	r18, r24
     3fe:	27 50       	subi	r18, 0x07	; 7
     400:	31 09       	sbc	r19, r1
     402:	22 30       	cpi	r18, 0x02	; 2
     404:	31 05       	cpc	r19, r1
     406:	20 f4       	brcc	.+8      	; 0x410 <showS+0x3c>
			PORTA=(1 << 7) | s[j++];
     408:	20 81       	ld	r18, Z
     40a:	20 68       	ori	r18, 0x80	; 128
     40c:	2b bb       	out	0x1b, r18	; 27
     40e:	02 c0       	rjmp	.+4      	; 0x414 <showS+0x40>
		else
			PORTA=s[j++];
     410:	20 81       	ld	r18, Z
     412:	2b bb       	out	0x1b, r18	; 27
     414:	29 e1       	ldi	r18, 0x19	; 25
     416:	28 0f       	add	r18, r24
		PORTC=cnt+k;
     418:	25 bb       	out	0x15, r18	; 21
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	31 96       	adiw	r30, 0x01	; 1
		PORTA=s[j++];
		PORTC=cnt+k;
		k++;
	}
	cnt=1<<5,k=0;
	for(int i=0;i<8;i++)
     41e:	8f 30       	cpi	r24, 0x0F	; 15
     420:	91 05       	cpc	r25, r1
     422:	29 f7       	brne	.-54     	; 0x3ee <showS+0x1a>
		else
			PORTA=s[j++];
		PORTC=cnt+k;
		k++;
	}
}
     424:	08 95       	ret

00000426 <myDelay>:

void myDelay()
{
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	c0 e0       	ldi	r28, 0x00	; 0
     42c:	d0 e0       	ldi	r29, 0x00	; 0
	for(long long j=0;j<F_CPU/1000;j++)
	{
		showPeg1();
     42e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <showPeg1>
		showPeg2();
     432:	0e 94 30 01 	call	0x260	; 0x260 <showPeg2>
		showPeg3();
     436:	0e 94 84 01 	call	0x308	; 0x308 <showPeg3>
     43a:	21 96       	adiw	r28, 0x01	; 1
	}
}

void myDelay()
{
	for(long long j=0;j<F_CPU/1000;j++)
     43c:	c8 3e       	cpi	r28, 0xE8	; 232
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	d8 07       	cpc	r29, r24
     442:	a9 f7       	brne	.-22     	; 0x42e <myDelay+0x8>
	{
		showPeg1();
		showPeg2();
		showPeg3();
	}
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <myDelay1>:

void myDelay1()
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	c0 e0       	ldi	r28, 0x00	; 0
     450:	d0 e0       	ldi	r29, 0x00	; 0
	for(long long j=0;j<F_CPU/5000;j++)
	{
		showPeg1();
     452:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <showPeg1>
		showPeg2();
     456:	0e 94 30 01 	call	0x260	; 0x260 <showPeg2>
		showPeg3();
     45a:	0e 94 84 01 	call	0x308	; 0x308 <showPeg3>
     45e:	21 96       	adiw	r28, 0x01	; 1
	}
}

void myDelay1()
{
	for(long long j=0;j<F_CPU/5000;j++)
     460:	c8 3c       	cpi	r28, 0xC8	; 200
     462:	d1 05       	cpc	r29, r1
     464:	b1 f7       	brne	.-20     	; 0x452 <myDelay1+0x8>
	{
		showPeg1();
		showPeg2();
		showPeg3();
	}
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <myDelay2>:

void myDelay2()
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	c0 e0       	ldi	r28, 0x00	; 0
     472:	d0 e0       	ldi	r29, 0x00	; 0
	for(long long j=0;j<F_CPU/5000;j++)
	{
		showG();
     474:	0e 94 c6 01 	call	0x38c	; 0x38c <showG>
		showS();
     478:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <showS>
     47c:	21 96       	adiw	r28, 0x01	; 1
	}
}

void myDelay2()
{
	for(long long j=0;j<F_CPU/5000;j++)
     47e:	c8 3c       	cpi	r28, 0xC8	; 200
     480:	d1 05       	cpc	r29, r1
     482:	c1 f7       	brne	.-16     	; 0x474 <myDelay2+0x8>
	{
		showG();
		showS();
	}
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <moveDisk>:

//Function to show the movement of disks
void moveDisk(int fromPeg, int toPeg, int disk)
{
	if(fromPeg == 1)
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	91 05       	cpc	r25, r1
     48e:	09 f5       	brne	.+66     	; 0x4d2 <moveDisk+0x48>
	{
		for(int c=0;c<disk;c++)
     490:	14 16       	cp	r1, r20
     492:	15 06       	cpc	r1, r21
     494:	0c f0       	brlt	.+2      	; 0x498 <moveDisk+0xe>
     496:	cc c0       	rjmp	.+408    	; 0x630 <moveDisk+0x1a6>
     498:	20 91 68 00 	lds	r18, 0x0068
     49c:	30 91 69 00 	lds	r19, 0x0069
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	ee 55       	subi	r30, 0x5E	; 94
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	a0 91 66 00 	lds	r26, 0x0066
     4ae:	b0 91 67 00 	lds	r27, 0x0067
     4b2:	ae 55       	subi	r26, 0x5E	; 94
     4b4:	bf 4f       	sbci	r27, 0xFF	; 255
     4b6:	24 1b       	sub	r18, r20
     4b8:	35 0b       	sbc	r19, r21
     4ba:	2e 55       	subi	r18, 0x5E	; 94
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			p1[top1-c]--;
     4be:	82 91       	ld	r24, -Z
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	80 83       	st	Z, r24
			p1[top2+c]--;
     4c4:	8c 91       	ld	r24, X
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	8d 93       	st	X+, r24
//Function to show the movement of disks
void moveDisk(int fromPeg, int toPeg, int disk)
{
	if(fromPeg == 1)
	{
		for(int c=0;c<disk;c++)
     4ca:	e2 17       	cp	r30, r18
     4cc:	f3 07       	cpc	r31, r19
     4ce:	b9 f7       	brne	.-18     	; 0x4be <moveDisk+0x34>
     4d0:	b4 c0       	rjmp	.+360    	; 0x63a <moveDisk+0x1b0>
		{
			p1[top1-c]--;
			p1[top2+c]--;
		}
	}
	else if(fromPeg == 2)
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f5       	brne	.+66     	; 0x51a <moveDisk+0x90>
	{
		for(int c=0;c<disk;c++)
     4d8:	14 16       	cp	r1, r20
     4da:	15 06       	cpc	r1, r21
     4dc:	0c f0       	brlt	.+2      	; 0x4e0 <moveDisk+0x56>
     4de:	a8 c0       	rjmp	.+336    	; 0x630 <moveDisk+0x1a6>
     4e0:	20 91 68 00 	lds	r18, 0x0068
     4e4:	30 91 69 00 	lds	r19, 0x0069
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	f9 01       	movw	r30, r18
     4ee:	ec 56       	subi	r30, 0x6C	; 108
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	a0 91 66 00 	lds	r26, 0x0066
     4f6:	b0 91 67 00 	lds	r27, 0x0067
     4fa:	ac 56       	subi	r26, 0x6C	; 108
     4fc:	bf 4f       	sbci	r27, 0xFF	; 255
     4fe:	24 1b       	sub	r18, r20
     500:	35 0b       	sbc	r19, r21
     502:	2c 56       	subi	r18, 0x6C	; 108
     504:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			p2[top1-c]--;
     506:	82 91       	ld	r24, -Z
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	80 83       	st	Z, r24
			p2[top2+c]--;
     50c:	8c 91       	ld	r24, X
     50e:	81 50       	subi	r24, 0x01	; 1
     510:	8d 93       	st	X+, r24
			p1[top2+c]--;
		}
	}
	else if(fromPeg == 2)
	{
		for(int c=0;c<disk;c++)
     512:	e2 17       	cp	r30, r18
     514:	f3 07       	cpc	r31, r19
     516:	b9 f7       	brne	.-18     	; 0x506 <moveDisk+0x7c>
     518:	90 c0       	rjmp	.+288    	; 0x63a <moveDisk+0x1b0>
		{
			p2[top1-c]--;
			p2[top2+c]--;
		}
	}
	else if(fromPeg == 3)
     51a:	03 97       	sbiw	r24, 0x03	; 3
     51c:	09 f5       	brne	.+66     	; 0x560 <moveDisk+0xd6>
	{
		for(int c=0;c<disk;c++)
     51e:	14 16       	cp	r1, r20
     520:	15 06       	cpc	r1, r21
     522:	0c f0       	brlt	.+2      	; 0x526 <moveDisk+0x9c>
     524:	85 c0       	rjmp	.+266    	; 0x630 <moveDisk+0x1a6>
     526:	20 91 68 00 	lds	r18, 0x0068
     52a:	30 91 69 00 	lds	r19, 0x0069
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	f9 01       	movw	r30, r18
     534:	ea 57       	subi	r30, 0x7A	; 122
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	a0 91 66 00 	lds	r26, 0x0066
     53c:	b0 91 67 00 	lds	r27, 0x0067
     540:	aa 57       	subi	r26, 0x7A	; 122
     542:	bf 4f       	sbci	r27, 0xFF	; 255
     544:	24 1b       	sub	r18, r20
     546:	35 0b       	sbc	r19, r21
     548:	2a 57       	subi	r18, 0x7A	; 122
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			p3[top1-c]--;
     54c:	82 91       	ld	r24, -Z
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	80 83       	st	Z, r24
			p3[top2+c]--;
     552:	8c 91       	ld	r24, X
     554:	81 50       	subi	r24, 0x01	; 1
     556:	8d 93       	st	X+, r24
			p2[top2+c]--;
		}
	}
	else if(fromPeg == 3)
	{
		for(int c=0;c<disk;c++)
     558:	e2 17       	cp	r30, r18
     55a:	f3 07       	cpc	r31, r19
     55c:	b9 f7       	brne	.-18     	; 0x54c <moveDisk+0xc2>
     55e:	6d c0       	rjmp	.+218    	; 0x63a <moveDisk+0x1b0>
		{
			p3[top1-c]--;
			p3[top2+c]--;
		}
	}
	if(toPeg == 1)
     560:	61 30       	cpi	r22, 0x01	; 1
     562:	71 05       	cpc	r23, r1
     564:	f1 f4       	brne	.+60     	; 0x5a2 <moveDisk+0x118>
	{
		for(int c=0;c<disk;c++)
     566:	14 16       	cp	r1, r20
     568:	15 06       	cpc	r1, r21
     56a:	0c f0       	brlt	.+2      	; 0x56e <moveDisk+0xe4>
     56c:	6b c0       	rjmp	.+214    	; 0x644 <moveDisk+0x1ba>
     56e:	a0 91 68 00 	lds	r26, 0x0068
     572:	b0 91 69 00 	lds	r27, 0x0069
     576:	ad 55       	subi	r26, 0x5D	; 93
     578:	bf 4f       	sbci	r27, 0xFF	; 255
     57a:	e0 91 66 00 	lds	r30, 0x0066
     57e:	f0 91 67 00 	lds	r31, 0x0067
     582:	ee 55       	subi	r30, 0x5E	; 94
     584:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			p1[top1-c]++;
			p1[top2+c]++;
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
	}
	if(toPeg == 1)
	{
		for(int c=0;c<disk;c++)
		{
			p1[top1-c]++;
     58a:	8e 91       	ld	r24, -X
     58c:	8f 5f       	subi	r24, 0xFF	; 255
     58e:	8c 93       	st	X, r24
			p1[top2+c]++;
     590:	80 81       	ld	r24, Z
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	81 93       	st	Z+, r24
			p3[top2+c]--;
		}
	}
	if(toPeg == 1)
	{
		for(int c=0;c<disk;c++)
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	24 17       	cp	r18, r20
     59c:	35 07       	cpc	r19, r21
     59e:	ac f3       	brlt	.-22     	; 0x58a <moveDisk+0x100>
     5a0:	08 95       	ret
		{
			p1[top1-c]++;
			p1[top2+c]++;
		}
	}
	else if(toPeg == 2)
     5a2:	62 30       	cpi	r22, 0x02	; 2
     5a4:	71 05       	cpc	r23, r1
     5a6:	09 f5       	brne	.+66     	; 0x5ea <moveDisk+0x160>
	{
		for(int c=0;c<disk;c++)
     5a8:	14 16       	cp	r1, r20
     5aa:	15 06       	cpc	r1, r21
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <moveDisk+0x126>
     5ae:	4a c0       	rjmp	.+148    	; 0x644 <moveDisk+0x1ba>
     5b0:	20 91 68 00 	lds	r18, 0x0068
     5b4:	30 91 69 00 	lds	r19, 0x0069
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	f9 01       	movw	r30, r18
     5be:	ec 56       	subi	r30, 0x6C	; 108
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	a0 91 66 00 	lds	r26, 0x0066
     5c6:	b0 91 67 00 	lds	r27, 0x0067
     5ca:	ac 56       	subi	r26, 0x6C	; 108
     5cc:	bf 4f       	sbci	r27, 0xFF	; 255
     5ce:	24 1b       	sub	r18, r20
     5d0:	35 0b       	sbc	r19, r21
     5d2:	2c 56       	subi	r18, 0x6C	; 108
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			p2[top1-c]++;
     5d6:	82 91       	ld	r24, -Z
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	80 83       	st	Z, r24
			p2[top2+c]++;
     5dc:	8c 91       	ld	r24, X
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	8d 93       	st	X+, r24
			p1[top2+c]++;
		}
	}
	else if(toPeg == 2)
	{
		for(int c=0;c<disk;c++)
     5e2:	e2 17       	cp	r30, r18
     5e4:	f3 07       	cpc	r31, r19
     5e6:	b9 f7       	brne	.-18     	; 0x5d6 <moveDisk+0x14c>
     5e8:	08 95       	ret
		{
			p2[top1-c]++;
			p2[top2+c]++;
		}
	}
	else if(toPeg == 3)
     5ea:	63 30       	cpi	r22, 0x03	; 3
     5ec:	71 05       	cpc	r23, r1
     5ee:	51 f5       	brne	.+84     	; 0x644 <moveDisk+0x1ba>
	{
		for(int c=0;c<disk;c++)
     5f0:	14 16       	cp	r1, r20
     5f2:	15 06       	cpc	r1, r21
     5f4:	3c f5       	brge	.+78     	; 0x644 <moveDisk+0x1ba>
     5f6:	20 91 68 00 	lds	r18, 0x0068
     5fa:	30 91 69 00 	lds	r19, 0x0069
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	f9 01       	movw	r30, r18
     604:	ea 57       	subi	r30, 0x7A	; 122
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	a0 91 66 00 	lds	r26, 0x0066
     60c:	b0 91 67 00 	lds	r27, 0x0067
     610:	aa 57       	subi	r26, 0x7A	; 122
     612:	bf 4f       	sbci	r27, 0xFF	; 255
     614:	24 1b       	sub	r18, r20
     616:	35 0b       	sbc	r19, r21
     618:	2a 57       	subi	r18, 0x7A	; 122
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			p3[top1-c]++;
     61c:	82 91       	ld	r24, -Z
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 83       	st	Z, r24
			p3[top2+c]++;
     622:	8c 91       	ld	r24, X
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	8d 93       	st	X+, r24
			p2[top2+c]++;
		}
	}
	else if(toPeg == 3)
	{
		for(int c=0;c<disk;c++)
     628:	e2 17       	cp	r30, r18
     62a:	f3 07       	cpc	r31, r19
     62c:	b9 f7       	brne	.-18     	; 0x61c <moveDisk+0x192>
     62e:	08 95       	ret
		{
			p3[top1-c]--;
			p3[top2+c]--;
		}
	}
	if(toPeg == 1)
     630:	61 30       	cpi	r22, 0x01	; 1
     632:	71 05       	cpc	r23, r1
     634:	09 f0       	breq	.+2      	; 0x638 <moveDisk+0x1ae>
     636:	b5 cf       	rjmp	.-150    	; 0x5a2 <moveDisk+0x118>
     638:	08 95       	ret
     63a:	61 30       	cpi	r22, 0x01	; 1
     63c:	71 05       	cpc	r23, r1
     63e:	09 f0       	breq	.+2      	; 0x642 <moveDisk+0x1b8>
     640:	b0 cf       	rjmp	.-160    	; 0x5a2 <moveDisk+0x118>
     642:	95 cf       	rjmp	.-214    	; 0x56e <moveDisk+0xe4>
     644:	08 95       	ret

00000646 <dk>:
	}
}

int dk(unsigned char *p)
{
	unsigned char m=p[1];
     646:	fc 01       	movw	r30, r24
     648:	31 81       	ldd	r19, Z+1	; 0x01
     64a:	32 96       	adiw	r30, 0x02	; 2
     64c:	ac 01       	movw	r20, r24
     64e:	43 5f       	subi	r20, 0xF3	; 243
     650:	5f 4f       	sbci	r21, 0xFF	; 255
	int cx=0;
	for(int i=2;i<13;i++)
	{
		if(p[i] > m)
     652:	21 91       	ld	r18, Z+
     654:	32 17       	cp	r19, r18
     656:	08 f4       	brcc	.+2      	; 0x65a <dk+0x14>
     658:	32 2f       	mov	r19, r18

int dk(unsigned char *p)
{
	unsigned char m=p[1];
	int cx=0;
	for(int i=2;i<13;i++)
     65a:	e4 17       	cp	r30, r20
     65c:	f5 07       	cpc	r31, r21
     65e:	c9 f7       	brne	.-14     	; 0x652 <dk+0xc>
     660:	fc 01       	movw	r30, r24
     662:	31 96       	adiw	r30, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
		if(p[i] > m)
			m=p[i];
	}
	for(int i=1;i<13;i++)
	{
		if(p[i] && (p[i] == m))
     668:	81 91       	ld	r24, Z+
     66a:	88 23       	and	r24, r24
     66c:	21 f0       	breq	.+8      	; 0x676 <dk+0x30>
     66e:	38 13       	cpse	r19, r24
     670:	02 c0       	rjmp	.+4      	; 0x676 <dk+0x30>
			cx++;
     672:	6f 5f       	subi	r22, 0xFF	; 255
     674:	7f 4f       	sbci	r23, 0xFF	; 255
	for(int i=2;i<13;i++)
	{
		if(p[i] > m)
			m=p[i];
	}
	for(int i=1;i<13;i++)
     676:	e4 17       	cp	r30, r20
     678:	f5 07       	cpc	r31, r21
     67a:	b1 f7       	brne	.-20     	; 0x668 <dk+0x22>
	{
		if(p[i] && (p[i] == m))
			cx++;
	}
	return cx/2;
     67c:	cb 01       	movw	r24, r22
     67e:	99 23       	and	r25, r25
     680:	0c f4       	brge	.+2      	; 0x684 <dk+0x3e>
     682:	01 96       	adiw	r24, 0x01	; 1
}
     684:	95 95       	asr	r25
     686:	87 95       	ror	r24
     688:	08 95       	ret

0000068a <__vector_1>:

ISR(INT0_vect)
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
	if(strt)
     6b0:	80 91 c2 00 	lds	r24, 0x00C2
     6b4:	90 91 c3 00 	lds	r25, 0x00C3
     6b8:	89 2b       	or	r24, r25
     6ba:	e9 f0       	breq	.+58     	; 0x6f6 <__vector_1+0x6c>
	{
		myDelay2();
     6bc:	0e 94 36 02 	call	0x46c	; 0x46c <myDelay2>
		if(cur == 1)
     6c0:	80 91 c6 00 	lds	r24, 0x00C6
     6c4:	90 91 c7 00 	lds	r25, 0x00C7
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	91 05       	cpc	r25, r1
     6cc:	39 f4       	brne	.+14     	; 0x6dc <__vector_1+0x52>
		{
			sim=-1;
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	9f ef       	ldi	r25, 0xFF	; 255
     6d2:	90 93 c9 00 	sts	0x00C9, r25
     6d6:	80 93 c8 00 	sts	0x00C8, r24
     6da:	08 c0       	rjmp	.+16     	; 0x6ec <__vector_1+0x62>
		}
		else if(cur == 3)
     6dc:	03 97       	sbiw	r24, 0x03	; 3
     6de:	31 f4       	brne	.+12     	; 0x6ec <__vector_1+0x62>
		{
			sim=1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 c9 00 	sts	0x00C9, r25
     6e8:	80 93 c8 00 	sts	0x00C8, r24
		}
		strt=0;
     6ec:	10 92 c3 00 	sts	0x00C3, r1
     6f0:	10 92 c2 00 	sts	0x00C2, r1
     6f4:	92 c0       	rjmp	.+292    	; 0x81a <__vector_1+0x190>
	}
	else
	{
		myDelay1();
     6f6:	0e 94 25 02 	call	0x44a	; 0x44a <myDelay1>
		ret++;
     6fa:	80 91 ca 00 	lds	r24, 0x00CA
     6fe:	90 91 cb 00 	lds	r25, 0x00CB
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	90 93 cb 00 	sts	0x00CB, r25
     708:	80 93 ca 00 	sts	0x00CA, r24
		if(ret == 2)
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	91 05       	cpc	r25, r1
     710:	09 f0       	breq	.+2      	; 0x714 <__vector_1+0x8a>
     712:	44 c0       	rjmp	.+136    	; 0x79c <__vector_1+0x112>
		{
			ret=0;
     714:	10 92 cb 00 	sts	0x00CB, r1
     718:	10 92 ca 00 	sts	0x00CA, r1
			to=cur;
     71c:	c0 91 c6 00 	lds	r28, 0x00C6
     720:	d0 91 c7 00 	lds	r29, 0x00C7
     724:	d0 93 c5 00 	sts	0x00C5, r29
     728:	c0 93 c4 00 	sts	0x00C4, r28
			int flag=0,cnt=0;
			if(to == 1)
     72c:	c1 30       	cpi	r28, 0x01	; 1
     72e:	d1 05       	cpc	r29, r1
     730:	81 f4       	brne	.+32     	; 0x752 <__vector_1+0xc8>
			{
				cnt=dk(p1);
     732:	82 ea       	ldi	r24, 0xA2	; 162
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 23 03 	call	0x646	; 0x646 <dk>
				if(!cnt || dsk < cnt)
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	09 f4       	brne	.+2      	; 0x740 <__vector_1+0xb6>
     73e:	60 c0       	rjmp	.+192    	; 0x800 <__vector_1+0x176>
     740:	20 91 c0 00 	lds	r18, 0x00C0
     744:	30 91 c1 00 	lds	r19, 0x00C1
     748:	28 17       	cp	r18, r24
     74a:	39 07       	cpc	r19, r25
     74c:	0c f4       	brge	.+2      	; 0x750 <__vector_1+0xc6>
     74e:	58 c0       	rjmp	.+176    	; 0x800 <__vector_1+0x176>
     750:	64 c0       	rjmp	.+200    	; 0x81a <__vector_1+0x190>
					flag=1;
			}
			else if(to == 2)
     752:	c2 30       	cpi	r28, 0x02	; 2
     754:	d1 05       	cpc	r29, r1
     756:	81 f4       	brne	.+32     	; 0x778 <__vector_1+0xee>
			{	
				cnt=dk(p2);
     758:	84 e9       	ldi	r24, 0x94	; 148
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 23 03 	call	0x646	; 0x646 <dk>
				if(!cnt || dsk < cnt)
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	09 f4       	brne	.+2      	; 0x766 <__vector_1+0xdc>
     764:	4d c0       	rjmp	.+154    	; 0x800 <__vector_1+0x176>
     766:	20 91 c0 00 	lds	r18, 0x00C0
     76a:	30 91 c1 00 	lds	r19, 0x00C1
     76e:	28 17       	cp	r18, r24
     770:	39 07       	cpc	r19, r25
     772:	0c f4       	brge	.+2      	; 0x776 <__vector_1+0xec>
     774:	45 c0       	rjmp	.+138    	; 0x800 <__vector_1+0x176>
     776:	51 c0       	rjmp	.+162    	; 0x81a <__vector_1+0x190>
					flag=1;
			}
			else if(to == 3)
     778:	c3 30       	cpi	r28, 0x03	; 3
     77a:	d1 05       	cpc	r29, r1
     77c:	09 f0       	breq	.+2      	; 0x780 <__vector_1+0xf6>
     77e:	4d c0       	rjmp	.+154    	; 0x81a <__vector_1+0x190>
			{
				cnt=dk(p3);
     780:	86 e8       	ldi	r24, 0x86	; 134
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 23 03 	call	0x646	; 0x646 <dk>
				if(!cnt || dsk < cnt)
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	d1 f1       	breq	.+116    	; 0x800 <__vector_1+0x176>
     78c:	20 91 c0 00 	lds	r18, 0x00C0
     790:	30 91 c1 00 	lds	r19, 0x00C1
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	9c f1       	brlt	.+102    	; 0x800 <__vector_1+0x176>
     79a:	3f c0       	rjmp	.+126    	; 0x81a <__vector_1+0x190>
			{	
				moveDisk(fro,to,dsk);
				myDelay();
			}
		}
		else if(ret == 1)
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	59 f5       	brne	.+86     	; 0x7f6 <__vector_1+0x16c>
		{
			fro=cur;
     7a0:	80 91 c6 00 	lds	r24, 0x00C6
     7a4:	90 91 c7 00 	lds	r25, 0x00C7
     7a8:	90 93 bf 00 	sts	0x00BF, r25
     7ac:	80 93 be 00 	sts	0x00BE, r24
			if(cur == 1)
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	91 05       	cpc	r25, r1
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <__vector_1+0x13e>
			{
				dsk=dk(p1);
     7b6:	82 ea       	ldi	r24, 0xA2	; 162
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 23 03 	call	0x646	; 0x646 <dk>
     7be:	90 93 c1 00 	sts	0x00C1, r25
     7c2:	80 93 c0 00 	sts	0x00C0, r24
     7c6:	29 c0       	rjmp	.+82     	; 0x81a <__vector_1+0x190>
			}
			else if(cur == 2)
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	91 05       	cpc	r25, r1
     7cc:	49 f4       	brne	.+18     	; 0x7e0 <__vector_1+0x156>
			{
				dsk=dk(p2);
     7ce:	84 e9       	ldi	r24, 0x94	; 148
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 23 03 	call	0x646	; 0x646 <dk>
     7d6:	90 93 c1 00 	sts	0x00C1, r25
     7da:	80 93 c0 00 	sts	0x00C0, r24
     7de:	1d c0       	rjmp	.+58     	; 0x81a <__vector_1+0x190>
			}
			else if(cur == 3)
     7e0:	03 97       	sbiw	r24, 0x03	; 3
     7e2:	d9 f4       	brne	.+54     	; 0x81a <__vector_1+0x190>
			{
				dsk=dk(p3);
     7e4:	86 e8       	ldi	r24, 0x86	; 134
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 23 03 	call	0x646	; 0x646 <dk>
     7ec:	90 93 c1 00 	sts	0x00C1, r25
     7f0:	80 93 c0 00 	sts	0x00C0, r24
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__vector_1+0x190>
			}
		}
		else
			ret=0;
     7f6:	10 92 cb 00 	sts	0x00CB, r1
     7fa:	10 92 ca 00 	sts	0x00CA, r1
     7fe:	0d c0       	rjmp	.+26     	; 0x81a <__vector_1+0x190>
				if(!cnt || dsk < cnt)
					flag=1;
			}
			if(flag)
			{	
				moveDisk(fro,to,dsk);
     800:	40 91 c0 00 	lds	r20, 0x00C0
     804:	50 91 c1 00 	lds	r21, 0x00C1
     808:	be 01       	movw	r22, r28
     80a:	80 91 be 00 	lds	r24, 0x00BE
     80e:	90 91 bf 00 	lds	r25, 0x00BF
     812:	0e 94 45 02 	call	0x48a	; 0x48a <moveDisk>
				myDelay();
     816:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
			}
		}
		else
			ret=0;
	}
}
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_2>:

ISR(INT1_vect)
{
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
	if(cur > 1)
     862:	80 91 c6 00 	lds	r24, 0x00C6
     866:	90 91 c7 00 	lds	r25, 0x00C7
     86a:	02 97       	sbiw	r24, 0x02	; 2
     86c:	ec f0       	brlt	.+58     	; 0x8a8 <__stack+0x49>
	{
		if(strt)
     86e:	80 91 c2 00 	lds	r24, 0x00C2
     872:	90 91 c3 00 	lds	r25, 0x00C3
     876:	89 2b       	or	r24, r25
     878:	61 f0       	breq	.+24     	; 0x892 <__stack+0x33>
		{
			myDelay2();
     87a:	0e 94 36 02 	call	0x46c	; 0x46c <myDelay2>
			cur -= 2;
     87e:	80 91 c6 00 	lds	r24, 0x00C6
     882:	90 91 c7 00 	lds	r25, 0x00C7
     886:	02 97       	sbiw	r24, 0x02	; 2
     888:	90 93 c7 00 	sts	0x00C7, r25
     88c:	80 93 c6 00 	sts	0x00C6, r24
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
		}
		else
		{
			myDelay1();
     892:	0e 94 25 02 	call	0x44a	; 0x44a <myDelay1>
			cur--;
     896:	80 91 c6 00 	lds	r24, 0x00C6
     89a:	90 91 c7 00 	lds	r25, 0x00C7
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	90 93 c7 00 	sts	0x00C7, r25
     8a4:	80 93 c6 00 	sts	0x00C6, r24
		}
	}
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <__vector_3>:

ISR(INT2_vect)
{
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	0f 92       	push	r0
     8d2:	11 24       	eor	r1, r1
     8d4:	2f 93       	push	r18
     8d6:	3f 93       	push	r19
     8d8:	4f 93       	push	r20
     8da:	5f 93       	push	r21
     8dc:	6f 93       	push	r22
     8de:	7f 93       	push	r23
     8e0:	8f 93       	push	r24
     8e2:	9f 93       	push	r25
     8e4:	af 93       	push	r26
     8e6:	bf 93       	push	r27
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
	if(cur < 3)
     8ec:	80 91 c6 00 	lds	r24, 0x00C6
     8f0:	90 91 c7 00 	lds	r25, 0x00C7
     8f4:	03 97       	sbiw	r24, 0x03	; 3
     8f6:	ec f4       	brge	.+58     	; 0x932 <__vector_3+0x68>
	{
		if(strt)
     8f8:	80 91 c2 00 	lds	r24, 0x00C2
     8fc:	90 91 c3 00 	lds	r25, 0x00C3
     900:	89 2b       	or	r24, r25
     902:	61 f0       	breq	.+24     	; 0x91c <__vector_3+0x52>
		{
			myDelay2();
     904:	0e 94 36 02 	call	0x46c	; 0x46c <myDelay2>
			cur += 2;
     908:	80 91 c6 00 	lds	r24, 0x00C6
     90c:	90 91 c7 00 	lds	r25, 0x00C7
     910:	02 96       	adiw	r24, 0x02	; 2
     912:	90 93 c7 00 	sts	0x00C7, r25
     916:	80 93 c6 00 	sts	0x00C6, r24
     91a:	0b c0       	rjmp	.+22     	; 0x932 <__vector_3+0x68>
		}
		else
		{
			myDelay1();
     91c:	0e 94 25 02 	call	0x44a	; 0x44a <myDelay1>
			cur++;
     920:	80 91 c6 00 	lds	r24, 0x00C6
     924:	90 91 c7 00 	lds	r25, 0x00C7
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	90 93 c7 00 	sts	0x00C7, r25
     92e:	80 93 c6 00 	sts	0x00C6, r24
		}
	}
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <moveDisksBetweenTwoPoles>:

// Function to implement legal movement between
// two poles
void moveDisksBetweenTwoPoles(struct Stack *src,
struct Stack *dest, int s, int d)
{
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	6c 01       	movw	r12, r24
     96e:	7b 01       	movw	r14, r22
     970:	4a 01       	movw	r8, r20
     972:	59 01       	movw	r10, r18
	int pole1TopDisk = pop(src);
     974:	0e 94 c4 00 	call	0x188	; 0x188 <pop>
     978:	ec 01       	movw	r28, r24
	int pole2TopDisk = pop(dest);
     97a:	c7 01       	movw	r24, r14
     97c:	0e 94 c4 00 	call	0x188	; 0x188 <pop>
     980:	8c 01       	movw	r16, r24

	// When pole 1 is empty
	if (pole1TopDisk == INT_MIN)
     982:	cf 3f       	cpi	r28, 0xFF	; 255
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	d8 07       	cpc	r29, r24
     988:	51 f4       	brne	.+20     	; 0x99e <moveDisksBetweenTwoPoles+0x4a>
	{
		push(src, pole2TopDisk);
     98a:	b8 01       	movw	r22, r16
     98c:	c6 01       	movw	r24, r12
     98e:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		moveDisk(d, s, pole2TopDisk);
     992:	a8 01       	movw	r20, r16
     994:	b4 01       	movw	r22, r8
     996:	c5 01       	movw	r24, r10
     998:	0e 94 45 02 	call	0x48a	; 0x48a <moveDisk>
     99c:	2c c0       	rjmp	.+88     	; 0x9f6 <moveDisksBetweenTwoPoles+0xa2>
	}

	// When pole2 pole is empty
	else if (pole2TopDisk == INT_MIN)
     99e:	0f 3f       	cpi	r16, 0xFF	; 255
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	18 07       	cpc	r17, r24
     9a4:	51 f4       	brne	.+20     	; 0x9ba <moveDisksBetweenTwoPoles+0x66>
	{
		push(dest, pole1TopDisk);
     9a6:	be 01       	movw	r22, r28
     9a8:	c7 01       	movw	r24, r14
     9aa:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		moveDisk(s, d, pole1TopDisk);
     9ae:	ae 01       	movw	r20, r28
     9b0:	b5 01       	movw	r22, r10
     9b2:	c4 01       	movw	r24, r8
     9b4:	0e 94 45 02 	call	0x48a	; 0x48a <moveDisk>
     9b8:	1e c0       	rjmp	.+60     	; 0x9f6 <moveDisksBetweenTwoPoles+0xa2>
	}

	// When top disk of pole1 > top disk of pole2
	else if (pole1TopDisk > pole2TopDisk)
     9ba:	0c 17       	cp	r16, r28
     9bc:	1d 07       	cpc	r17, r29
     9be:	74 f4       	brge	.+28     	; 0x9dc <moveDisksBetweenTwoPoles+0x88>
	{
		push(src, pole1TopDisk);
     9c0:	be 01       	movw	r22, r28
     9c2:	c6 01       	movw	r24, r12
     9c4:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		push(src, pole2TopDisk);
     9c8:	b8 01       	movw	r22, r16
     9ca:	c6 01       	movw	r24, r12
     9cc:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		moveDisk(d, s, pole2TopDisk);
     9d0:	a8 01       	movw	r20, r16
     9d2:	b4 01       	movw	r22, r8
     9d4:	c5 01       	movw	r24, r10
     9d6:	0e 94 45 02 	call	0x48a	; 0x48a <moveDisk>
     9da:	0d c0       	rjmp	.+26     	; 0x9f6 <moveDisksBetweenTwoPoles+0xa2>
	}

	// When top disk of pole1 < top disk of pole2
	else
	{
		push(dest, pole2TopDisk);
     9dc:	b8 01       	movw	r22, r16
     9de:	c7 01       	movw	r24, r14
     9e0:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		push(dest, pole1TopDisk);
     9e4:	be 01       	movw	r22, r28
     9e6:	c7 01       	movw	r24, r14
     9e8:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		moveDisk(s, d, pole1TopDisk);
     9ec:	ae 01       	movw	r20, r28
     9ee:	b5 01       	movw	r22, r10
     9f0:	c4 01       	movw	r24, r8
     9f2:	0e 94 45 02 	call	0x48a	; 0x48a <moveDisk>
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	9f 90       	pop	r9
     a0c:	8f 90       	pop	r8
     a0e:	08 95       	ret

00000a10 <tohIterative>:

//Function to implement TOH puzzle
void tohIterative(int num_of_disks, struct Stack
*src, struct Stack *aux,
struct Stack *dest)
{
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
     a32:	7b 01       	movw	r14, r22
     a34:	4a 01       	movw	r8, r20
     a36:	59 01       	movw	r10, r18
	int i, total_num_of_moves;
	int s = 1, d = 3, a = 2;

	//If number of disks is even, then interchange
	//destination pole and auxiliary pole
	if (num_of_disks % 2 == 0)
     a38:	80 fd       	sbrc	r24, 0
     a3a:	0a c0       	rjmp	.+20     	; 0xa50 <tohIterative+0x40>
	{
		int temp = d;
		d = a;
		a  = temp;
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f3 e0       	ldi	r31, 0x03	; 3
     a40:	4f 2e       	mov	r4, r31
     a42:	51 2c       	mov	r5, r1
     a44:	f0 2d       	mov	r31, r0
	//If number of disks is even, then interchange
	//destination pole and auxiliary pole
	if (num_of_disks % 2 == 0)
	{
		int temp = d;
		d = a;
     a46:	68 94       	set
     a48:	66 24       	eor	r6, r6
     a4a:	61 f8       	bld	r6, 1
     a4c:	71 2c       	mov	r7, r1
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <tohIterative+0x52>
void tohIterative(int num_of_disks, struct Stack
*src, struct Stack *aux,
struct Stack *dest)
{
	int i, total_num_of_moves;
	int s = 1, d = 3, a = 2;
     a50:	68 94       	set
     a52:	44 24       	eor	r4, r4
     a54:	41 f8       	bld	r4, 1
     a56:	51 2c       	mov	r5, r1
     a58:	0f 2e       	mov	r0, r31
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	6f 2e       	mov	r6, r31
     a5e:	71 2c       	mov	r7, r1
     a60:	f0 2d       	mov	r31, r0
	{
		int temp = d;
		d = a;
		a  = temp;
	}
	total_num_of_moves = pow(2, num_of_disks) - 1;
     a62:	be 01       	movw	r22, r28
     a64:	0d 2e       	mov	r0, r29
     a66:	00 0c       	add	r0, r0
     a68:	88 0b       	sbc	r24, r24
     a6a:	99 0b       	sbc	r25, r25
     a6c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e4       	ldi	r25, 0x40	; 64
     a7c:	0e 94 80 07 	call	0xf00	; 0xf00 <pow>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__subsf3>
     a8c:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fixsfsi>
     a90:	8b 01       	movw	r16, r22

	//Larger disks will be pushed first
	for (i = num_of_disks; i >= 1; i--)
     a92:	1c 16       	cp	r1, r28
     a94:	1d 06       	cpc	r1, r29
     a96:	34 f4       	brge	.+12     	; 0xaa4 <tohIterative+0x94>
	push(src, i);
     a98:	be 01       	movw	r22, r28
     a9a:	c7 01       	movw	r24, r14
     a9c:	0e 94 a7 00 	call	0x14e	; 0x14e <push>
		a  = temp;
	}
	total_num_of_moves = pow(2, num_of_disks) - 1;

	//Larger disks will be pushed first
	for (i = num_of_disks; i >= 1; i--)
     aa0:	21 97       	sbiw	r28, 0x01	; 1
     aa2:	d1 f7       	brne	.-12     	; 0xa98 <tohIterative+0x88>
	push(src, i);

	for (i = 1; i <= total_num_of_moves; i++)
     aa4:	10 16       	cp	r1, r16
     aa6:	11 06       	cpc	r1, r17
     aa8:	7c f5       	brge	.+94     	; 0xb08 <tohIterative+0xf8>
     aaa:	c1 e0       	ldi	r28, 0x01	; 1
     aac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		myDelay();
		if (i % 3 == 1)
     aae:	0f 2e       	mov	r0, r31
     ab0:	f3 e0       	ldi	r31, 0x03	; 3
     ab2:	cf 2e       	mov	r12, r31
     ab4:	d1 2c       	mov	r13, r1
     ab6:	f0 2d       	mov	r31, r0
	for (i = num_of_disks; i >= 1; i--)
	push(src, i);

	for (i = 1; i <= total_num_of_moves; i++)
	{
		myDelay();
     ab8:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
		if (i % 3 == 1)
     abc:	ce 01       	movw	r24, r28
     abe:	b6 01       	movw	r22, r12
     ac0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	91 05       	cpc	r25, r1
     ac8:	41 f4       	brne	.+16     	; 0xada <tohIterative+0xca>
		moveDisksBetweenTwoPoles(src, dest, s, d);
     aca:	93 01       	movw	r18, r6
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	b5 01       	movw	r22, r10
     ad2:	c7 01       	movw	r24, r14
     ad4:	0e 94 aa 04 	call	0x954	; 0x954 <moveDisksBetweenTwoPoles>
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <tohIterative+0xf0>

		else if (i % 3 == 2)
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	91 05       	cpc	r25, r1
     ade:	41 f4       	brne	.+16     	; 0xaf0 <tohIterative+0xe0>
		moveDisksBetweenTwoPoles(src, aux, s, a);
     ae0:	92 01       	movw	r18, r4
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	b4 01       	movw	r22, r8
     ae8:	c7 01       	movw	r24, r14
     aea:	0e 94 aa 04 	call	0x954	; 0x954 <moveDisksBetweenTwoPoles>
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <tohIterative+0xf0>

		else if (i % 3 == 0)
     af0:	89 2b       	or	r24, r25
     af2:	31 f4       	brne	.+12     	; 0xb00 <tohIterative+0xf0>
		moveDisksBetweenTwoPoles(aux, dest, a, d);
     af4:	93 01       	movw	r18, r6
     af6:	a2 01       	movw	r20, r4
     af8:	b5 01       	movw	r22, r10
     afa:	c4 01       	movw	r24, r8
     afc:	0e 94 aa 04 	call	0x954	; 0x954 <moveDisksBetweenTwoPoles>

	//Larger disks will be pushed first
	for (i = num_of_disks; i >= 1; i--)
	push(src, i);

	for (i = 1; i <= total_num_of_moves; i++)
     b00:	21 96       	adiw	r28, 0x01	; 1
     b02:	0c 17       	cp	r16, r28
     b04:	1d 07       	cpc	r17, r29
     b06:	c4 f6       	brge	.-80     	; 0xab8 <tohIterative+0xa8>
		moveDisksBetweenTwoPoles(src, aux, s, a);

		else if (i % 3 == 0)
		moveDisksBetweenTwoPoles(aux, dest, a, d);
	}
	myDelay();
     b08:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
	p2[top1]--,p2[top2]--;
     b0c:	a0 91 68 00 	lds	r26, 0x0068
     b10:	b0 91 69 00 	lds	r27, 0x0069
     b14:	fd 01       	movw	r30, r26
     b16:	ec 56       	subi	r30, 0x6C	; 108
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	80 81       	ld	r24, Z
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24
     b20:	e0 91 66 00 	lds	r30, 0x0066
     b24:	f0 91 67 00 	lds	r31, 0x0067
     b28:	ef 01       	movw	r28, r30
     b2a:	cc 56       	subi	r28, 0x6C	; 108
     b2c:	df 4f       	sbci	r29, 0xFF	; 255
     b2e:	88 81       	ld	r24, Y
     b30:	81 50       	subi	r24, 0x01	; 1
     b32:	88 83       	st	Y, r24
	p3[top1]++,p3[top2]++;
     b34:	aa 57       	subi	r26, 0x7A	; 122
     b36:	bf 4f       	sbci	r27, 0xFF	; 255
     b38:	8c 91       	ld	r24, X
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	8c 93       	st	X, r24
     b3e:	ea 57       	subi	r30, 0x7A	; 122
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	80 81       	ld	r24, Z
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	80 83       	st	Z, r24
	myDelay();
     b48:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	7f 90       	pop	r7
     b66:	6f 90       	pop	r6
     b68:	5f 90       	pop	r5
     b6a:	4f 90       	pop	r4
     b6c:	08 95       	ret

00000b6e <done>:

int done()
{
	for(int i=0;i<14;i++)
	{
		if(over[i] != p3[i])
     b6e:	90 91 b0 00 	lds	r25, 0x00B0
     b72:	80 91 86 00 	lds	r24, 0x0086
     b76:	98 13       	cpse	r25, r24
     b78:	10 c0       	rjmp	.+32     	; 0xb9a <done+0x2c>
     b7a:	e1 eb       	ldi	r30, 0xB1	; 177
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	a7 e8       	ldi	r26, 0x87	; 135
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	2e eb       	ldi	r18, 0xBE	; 190
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	91 91       	ld	r25, Z+
     b88:	8d 91       	ld	r24, X+
     b8a:	98 13       	cpse	r25, r24
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <done+0x32>
	myDelay();
}

int done()
{
	for(int i=0;i<14;i++)
     b8e:	e2 17       	cp	r30, r18
     b90:	f3 07       	cpc	r31, r19
     b92:	c9 f7       	brne	.-14     	; 0xb86 <done+0x18>
	{
		if(over[i] != p3[i])
			return 0;
	}
	return 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	08 95       	ret
int done()
{
	for(int i=0;i<14;i++)
	{
		if(over[i] != p3[i])
			return 0;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	08 95       	ret
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
     ba4:	08 95       	ret

00000ba6 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRA = 0xFF;
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	8a bb       	out	0x1a, r24	; 26
	DDRB = ~4;
     baa:	9b ef       	ldi	r25, 0xFB	; 251
     bac:	97 bb       	out	0x17, r25	; 23
	DDRD = ~12;
     bae:	93 ef       	ldi	r25, 0xF3	; 243
     bb0:	91 bb       	out	0x11, r25	; 17
	MCUCSR = (1<<JTD);
     bb2:	90 e8       	ldi	r25, 0x80	; 128
     bb4:	94 bf       	out	0x34, r25	; 52
	MCUCSR = (1<<JTD);
     bb6:	94 bf       	out	0x34, r25	; 52
	DDRC = 0xFF;
     bb8:	84 bb       	out	0x14, r24	; 20
	
	unsigned int num_of_disks = 6;

	struct Stack *src, *dest, *aux;

	src = createStack(num_of_disks);
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
	aux = createStack(num_of_disks);
     bc2:	86 e0       	ldi	r24, 0x06	; 6
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
	dest = createStack(num_of_disks);
     bca:	86 e0       	ldi	r24, 0x06	; 6
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
	GICR |= (1 << INT0);
     bd2:	8b b7       	in	r24, 0x3b	; 59
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);
     bd8:	8b b7       	in	r24, 0x3b	; 59
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT2);
     bde:	8b b7       	in	r24, 0x3b	; 59
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= (1 << ISC2);
     be4:	84 b7       	in	r24, 0x34	; 52
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	84 bf       	out	0x34, r24	; 52
	MCUCR = 15;
     bea:	8f e0       	ldi	r24, 0x0F	; 15
     bec:	85 bf       	out	0x35, r24	; 53
	cur=1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 c7 00 	sts	0x00C7, r25
     bf6:	80 93 c6 00 	sts	0x00C6, r24
	sei();
     bfa:	78 94       	sei
	while(1)
	{
		strt=1;
     bfc:	c1 e0       	ldi	r28, 0x01	; 1
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	d0 93 c3 00 	sts	0x00C3, r29
     c04:	c0 93 c2 00 	sts	0x00C2, r28
		showG();
     c08:	0e 94 c6 01 	call	0x38c	; 0x38c <showG>
		showS();
     c0c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <showS>
		if(sim == 1)
     c10:	80 91 c8 00 	lds	r24, 0x00C8
     c14:	90 91 c9 00 	lds	r25, 0x00C9
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	91 05       	cpc	r25, r1
     c1c:	19 f5       	brne	.+70     	; 0xc64 <main+0xbe>
		{
			cur=0;
     c1e:	10 92 c7 00 	sts	0x00C7, r1
     c22:	10 92 c6 00 	sts	0x00C6, r1
			src = createStack(num_of_disks);
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
     c2e:	8c 01       	movw	r16, r24
			aux = createStack(num_of_disks);
     c30:	86 e0       	ldi	r24, 0x06	; 6
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
     c38:	7c 01       	movw	r14, r24
			dest = createStack(num_of_disks);
     c3a:	86 e0       	ldi	r24, 0x06	; 6
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 8a 00 	call	0x114	; 0x114 <createStack>
     c42:	6c 01       	movw	r12, r24
			init();
     c44:	0e 94 df 00 	call	0x1be	; 0x1be <init>
			tohIterative(num_of_disks, src, aux, dest);
     c48:	96 01       	movw	r18, r12
     c4a:	a7 01       	movw	r20, r14
     c4c:	b8 01       	movw	r22, r16
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 08 05 	call	0xa10	; 0xa10 <tohIterative>
			myDelay();
     c56:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
			cur=1;
     c5a:	d0 93 c7 00 	sts	0x00C7, r29
     c5e:	c0 93 c6 00 	sts	0x00C6, r28
     c62:	18 c0       	rjmp	.+48     	; 0xc94 <main+0xee>
		}
		else if(sim == -1)
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	b1 f4       	brne	.+44     	; 0xc94 <main+0xee>
		{
			init();
     c68:	0e 94 df 00 	call	0x1be	; 0x1be <init>
			cur=1;
     c6c:	d0 93 c7 00 	sts	0x00C7, r29
     c70:	c0 93 c6 00 	sts	0x00C6, r28
			while(1)
			{
				showPeg1();
     c74:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <showPeg1>
				showPeg2();
     c78:	0e 94 30 01 	call	0x260	; 0x260 <showPeg2>
				showPeg3();
     c7c:	0e 94 84 01 	call	0x308	; 0x308 <showPeg3>
				if(done())
     c80:	0e 94 b7 05 	call	0xb6e	; 0xb6e <done>
     c84:	89 2b       	or	r24, r25
     c86:	b1 f3       	breq	.-20     	; 0xc74 <main+0xce>
				{
					myDelay();
     c88:	0e 94 13 02 	call	0x426	; 0x426 <myDelay>
					break;
				}
			}
			cur=1;
     c8c:	d0 93 c7 00 	sts	0x00C7, r29
     c90:	c0 93 c6 00 	sts	0x00C6, r28
		}
		sim=0;
     c94:	10 92 c9 00 	sts	0x00C9, r1
     c98:	10 92 c8 00 	sts	0x00C8, r1
	}
     c9c:	b1 cf       	rjmp	.-158    	; 0xc00 <main+0x5a>

00000c9e <__subsf3>:
     c9e:	50 58       	subi	r21, 0x80	; 128

00000ca0 <__addsf3>:
     ca0:	bb 27       	eor	r27, r27
     ca2:	aa 27       	eor	r26, r26
     ca4:	0e 94 67 06 	call	0xcce	; 0xcce <__addsf3x>
     ca8:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
     cac:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
     cb0:	38 f0       	brcs	.+14     	; 0xcc0 <__addsf3+0x20>
     cb2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3+0x20>
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <__addsf3+0x28>
     cba:	9f 3f       	cpi	r25, 0xFF	; 255
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <__addsf3+0x24>
     cbe:	26 f4       	brtc	.+8      	; 0xcc8 <__addsf3+0x28>
     cc0:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
     cc4:	0e f4       	brtc	.+2      	; 0xcc8 <__addsf3+0x28>
     cc6:	e0 95       	com	r30
     cc8:	e7 fb       	bst	r30, 7
     cca:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>

00000cce <__addsf3x>:
     cce:	e9 2f       	mov	r30, r25
     cd0:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__addsf3+0xc>
     cd6:	ba 17       	cp	r27, r26
     cd8:	62 07       	cpc	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__addsf3x+0x1c>
     ce2:	79 f4       	brne	.+30     	; 0xd02 <__addsf3x+0x34>
     ce4:	a6 f5       	brtc	.+104    	; 0xd4e <__addsf3x+0x80>
     ce6:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_zero>
     cea:	0e f4       	brtc	.+2      	; 0xcee <__addsf3x+0x20>
     cec:	e0 95       	com	r30
     cee:	0b 2e       	mov	r0, r27
     cf0:	ba 2f       	mov	r27, r26
     cf2:	a0 2d       	mov	r26, r0
     cf4:	0b 01       	movw	r0, r22
     cf6:	b9 01       	movw	r22, r18
     cf8:	90 01       	movw	r18, r0
     cfa:	0c 01       	movw	r0, r24
     cfc:	ca 01       	movw	r24, r20
     cfe:	a0 01       	movw	r20, r0
     d00:	11 24       	eor	r1, r1
     d02:	ff 27       	eor	r31, r31
     d04:	59 1b       	sub	r21, r25
     d06:	99 f0       	breq	.+38     	; 0xd2e <__addsf3x+0x60>
     d08:	59 3f       	cpi	r21, 0xF9	; 249
     d0a:	50 f4       	brcc	.+20     	; 0xd20 <__addsf3x+0x52>
     d0c:	50 3e       	cpi	r21, 0xE0	; 224
     d0e:	68 f1       	brcs	.+90     	; 0xd6a <__addsf3x+0x9c>
     d10:	1a 16       	cp	r1, r26
     d12:	f0 40       	sbci	r31, 0x00	; 0
     d14:	a2 2f       	mov	r26, r18
     d16:	23 2f       	mov	r18, r19
     d18:	34 2f       	mov	r19, r20
     d1a:	44 27       	eor	r20, r20
     d1c:	58 5f       	subi	r21, 0xF8	; 248
     d1e:	f3 cf       	rjmp	.-26     	; 0xd06 <__addsf3x+0x38>
     d20:	46 95       	lsr	r20
     d22:	37 95       	ror	r19
     d24:	27 95       	ror	r18
     d26:	a7 95       	ror	r26
     d28:	f0 40       	sbci	r31, 0x00	; 0
     d2a:	53 95       	inc	r21
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <__addsf3x+0x52>
     d2e:	7e f4       	brtc	.+30     	; 0xd4e <__addsf3x+0x80>
     d30:	1f 16       	cp	r1, r31
     d32:	ba 0b       	sbc	r27, r26
     d34:	62 0b       	sbc	r22, r18
     d36:	73 0b       	sbc	r23, r19
     d38:	84 0b       	sbc	r24, r20
     d3a:	ba f0       	brmi	.+46     	; 0xd6a <__addsf3x+0x9c>
     d3c:	91 50       	subi	r25, 0x01	; 1
     d3e:	a1 f0       	breq	.+40     	; 0xd68 <__addsf3x+0x9a>
     d40:	ff 0f       	add	r31, r31
     d42:	bb 1f       	adc	r27, r27
     d44:	66 1f       	adc	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	c2 f7       	brpl	.-16     	; 0xd3c <__addsf3x+0x6e>
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <__addsf3x+0x9c>
     d4e:	ba 0f       	add	r27, r26
     d50:	62 1f       	adc	r22, r18
     d52:	73 1f       	adc	r23, r19
     d54:	84 1f       	adc	r24, r20
     d56:	48 f4       	brcc	.+18     	; 0xd6a <__addsf3x+0x9c>
     d58:	87 95       	ror	r24
     d5a:	77 95       	ror	r23
     d5c:	67 95       	ror	r22
     d5e:	b7 95       	ror	r27
     d60:	f7 95       	ror	r31
     d62:	9e 3f       	cpi	r25, 0xFE	; 254
     d64:	08 f0       	brcs	.+2      	; 0xd68 <__addsf3x+0x9a>
     d66:	b0 cf       	rjmp	.-160    	; 0xcc8 <__addsf3+0x28>
     d68:	93 95       	inc	r25
     d6a:	88 0f       	add	r24, r24
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <__addsf3x+0xa2>
     d6e:	99 27       	eor	r25, r25
     d70:	ee 0f       	add	r30, r30
     d72:	97 95       	ror	r25
     d74:	87 95       	ror	r24
     d76:	08 95       	ret

00000d78 <__fixsfsi>:
     d78:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fixunssfsi>
     d7c:	68 94       	set
     d7e:	b1 11       	cpse	r27, r1
     d80:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
     d84:	08 95       	ret

00000d86 <__fixunssfsi>:
     d86:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_splitA>
     d8a:	88 f0       	brcs	.+34     	; 0xdae <__fixunssfsi+0x28>
     d8c:	9f 57       	subi	r25, 0x7F	; 127
     d8e:	98 f0       	brcs	.+38     	; 0xdb6 <__fixunssfsi+0x30>
     d90:	b9 2f       	mov	r27, r25
     d92:	99 27       	eor	r25, r25
     d94:	b7 51       	subi	r27, 0x17	; 23
     d96:	b0 f0       	brcs	.+44     	; 0xdc4 <__fixunssfsi+0x3e>
     d98:	e1 f0       	breq	.+56     	; 0xdd2 <__fixunssfsi+0x4c>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	1a f0       	brmi	.+6      	; 0xdaa <__fixunssfsi+0x24>
     da4:	ba 95       	dec	r27
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__fixunssfsi+0x14>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <__fixunssfsi+0x4c>
     daa:	b1 30       	cpi	r27, 0x01	; 1
     dac:	91 f0       	breq	.+36     	; 0xdd2 <__fixunssfsi+0x4c>
     dae:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_zero>
     db2:	b1 e0       	ldi	r27, 0x01	; 1
     db4:	08 95       	ret
     db6:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_zero>
     dba:	67 2f       	mov	r22, r23
     dbc:	78 2f       	mov	r23, r24
     dbe:	88 27       	eor	r24, r24
     dc0:	b8 5f       	subi	r27, 0xF8	; 248
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <__fixunssfsi+0x4c>
     dc4:	b9 3f       	cpi	r27, 0xF9	; 249
     dc6:	cc f3       	brlt	.-14     	; 0xdba <__fixunssfsi+0x34>
     dc8:	86 95       	lsr	r24
     dca:	77 95       	ror	r23
     dcc:	67 95       	ror	r22
     dce:	b3 95       	inc	r27
     dd0:	d9 f7       	brne	.-10     	; 0xdc8 <__fixunssfsi+0x42>
     dd2:	3e f4       	brtc	.+14     	; 0xde2 <__fixunssfsi+0x5c>
     dd4:	90 95       	com	r25
     dd6:	80 95       	com	r24
     dd8:	70 95       	com	r23
     dda:	61 95       	neg	r22
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	08 95       	ret

00000de4 <__floatunsisf>:
     de4:	e8 94       	clt
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <__floatsisf+0x12>

00000de8 <__floatsisf>:
     de8:	97 fb       	bst	r25, 7
     dea:	3e f4       	brtc	.+14     	; 0xdfa <__floatsisf+0x12>
     dec:	90 95       	com	r25
     dee:	80 95       	com	r24
     df0:	70 95       	com	r23
     df2:	61 95       	neg	r22
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	99 23       	and	r25, r25
     dfc:	a9 f0       	breq	.+42     	; 0xe28 <__floatsisf+0x40>
     dfe:	f9 2f       	mov	r31, r25
     e00:	96 e9       	ldi	r25, 0x96	; 150
     e02:	bb 27       	eor	r27, r27
     e04:	93 95       	inc	r25
     e06:	f6 95       	lsr	r31
     e08:	87 95       	ror	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b7 95       	ror	r27
     e10:	f1 11       	cpse	r31, r1
     e12:	f8 cf       	rjmp	.-16     	; 0xe04 <__floatsisf+0x1c>
     e14:	fa f4       	brpl	.+62     	; 0xe54 <__floatsisf+0x6c>
     e16:	bb 0f       	add	r27, r27
     e18:	11 f4       	brne	.+4      	; 0xe1e <__floatsisf+0x36>
     e1a:	60 ff       	sbrs	r22, 0
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <__floatsisf+0x6c>
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	8f 4f       	sbci	r24, 0xFF	; 255
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <__floatsisf+0x6c>
     e28:	88 23       	and	r24, r24
     e2a:	11 f0       	breq	.+4      	; 0xe30 <__floatsisf+0x48>
     e2c:	96 e9       	ldi	r25, 0x96	; 150
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <__floatsisf+0x6a>
     e30:	77 23       	and	r23, r23
     e32:	21 f0       	breq	.+8      	; 0xe3c <__floatsisf+0x54>
     e34:	9e e8       	ldi	r25, 0x8E	; 142
     e36:	87 2f       	mov	r24, r23
     e38:	76 2f       	mov	r23, r22
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__floatsisf+0x5e>
     e3c:	66 23       	and	r22, r22
     e3e:	71 f0       	breq	.+28     	; 0xe5c <__floatsisf+0x74>
     e40:	96 e8       	ldi	r25, 0x86	; 134
     e42:	86 2f       	mov	r24, r22
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	2a f0       	brmi	.+10     	; 0xe54 <__floatsisf+0x6c>
     e4a:	9a 95       	dec	r25
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	da f7       	brpl	.-10     	; 0xe4a <__floatsisf+0x62>
     e54:	88 0f       	add	r24, r24
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret

00000e5e <__fp_inf>:
     e5e:	97 f9       	bld	r25, 7
     e60:	9f 67       	ori	r25, 0x7F	; 127
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	08 95       	ret

00000e6a <__fp_nan>:
     e6a:	9f ef       	ldi	r25, 0xFF	; 255
     e6c:	80 ec       	ldi	r24, 0xC0	; 192
     e6e:	08 95       	ret

00000e70 <__fp_pscA>:
     e70:	00 24       	eor	r0, r0
     e72:	0a 94       	dec	r0
     e74:	16 16       	cp	r1, r22
     e76:	17 06       	cpc	r1, r23
     e78:	18 06       	cpc	r1, r24
     e7a:	09 06       	cpc	r0, r25
     e7c:	08 95       	ret

00000e7e <__fp_pscB>:
     e7e:	00 24       	eor	r0, r0
     e80:	0a 94       	dec	r0
     e82:	12 16       	cp	r1, r18
     e84:	13 06       	cpc	r1, r19
     e86:	14 06       	cpc	r1, r20
     e88:	05 06       	cpc	r0, r21
     e8a:	08 95       	ret

00000e8c <__fp_round>:
     e8c:	09 2e       	mov	r0, r25
     e8e:	03 94       	inc	r0
     e90:	00 0c       	add	r0, r0
     e92:	11 f4       	brne	.+4      	; 0xe98 <__fp_round+0xc>
     e94:	88 23       	and	r24, r24
     e96:	52 f0       	brmi	.+20     	; 0xeac <__fp_round+0x20>
     e98:	bb 0f       	add	r27, r27
     e9a:	40 f4       	brcc	.+16     	; 0xeac <__fp_round+0x20>
     e9c:	bf 2b       	or	r27, r31
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__fp_round+0x18>
     ea0:	60 ff       	sbrs	r22, 0
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <__fp_round+0x20>
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	08 95       	ret

00000eae <__fp_split3>:
     eae:	57 fd       	sbrc	r21, 7
     eb0:	90 58       	subi	r25, 0x80	; 128
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	59 f0       	breq	.+22     	; 0xece <__fp_splitA+0x10>
     eb8:	5f 3f       	cpi	r21, 0xFF	; 255
     eba:	71 f0       	breq	.+28     	; 0xed8 <__fp_splitA+0x1a>
     ebc:	47 95       	ror	r20

00000ebe <__fp_splitA>:
     ebe:	88 0f       	add	r24, r24
     ec0:	97 fb       	bst	r25, 7
     ec2:	99 1f       	adc	r25, r25
     ec4:	61 f0       	breq	.+24     	; 0xede <__fp_splitA+0x20>
     ec6:	9f 3f       	cpi	r25, 0xFF	; 255
     ec8:	79 f0       	breq	.+30     	; 0xee8 <__fp_splitA+0x2a>
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret
     ece:	12 16       	cp	r1, r18
     ed0:	13 06       	cpc	r1, r19
     ed2:	14 06       	cpc	r1, r20
     ed4:	55 1f       	adc	r21, r21
     ed6:	f2 cf       	rjmp	.-28     	; 0xebc <__fp_split3+0xe>
     ed8:	46 95       	lsr	r20
     eda:	f1 df       	rcall	.-30     	; 0xebe <__fp_splitA>
     edc:	08 c0       	rjmp	.+16     	; 0xeee <__fp_splitA+0x30>
     ede:	16 16       	cp	r1, r22
     ee0:	17 06       	cpc	r1, r23
     ee2:	18 06       	cpc	r1, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	f1 cf       	rjmp	.-30     	; 0xeca <__fp_splitA+0xc>
     ee8:	86 95       	lsr	r24
     eea:	71 05       	cpc	r23, r1
     eec:	61 05       	cpc	r22, r1
     eee:	08 94       	sec
     ef0:	08 95       	ret

00000ef2 <__fp_zero>:
     ef2:	e8 94       	clt

00000ef4 <__fp_szero>:
     ef4:	bb 27       	eor	r27, r27
     ef6:	66 27       	eor	r22, r22
     ef8:	77 27       	eor	r23, r23
     efa:	cb 01       	movw	r24, r22
     efc:	97 f9       	bld	r25, 7
     efe:	08 95       	ret

00000f00 <pow>:
     f00:	fa 01       	movw	r30, r20
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	30 96       	adiw	r30, 0x00	; 0
     f08:	21 05       	cpc	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	a1 f1       	breq	.+104    	; 0xf76 <pow+0x76>
     f0e:	61 15       	cp	r22, r1
     f10:	71 05       	cpc	r23, r1
     f12:	61 f4       	brne	.+24     	; 0xf2c <pow+0x2c>
     f14:	80 38       	cpi	r24, 0x80	; 128
     f16:	bf e3       	ldi	r27, 0x3F	; 63
     f18:	9b 07       	cpc	r25, r27
     f1a:	49 f1       	breq	.+82     	; 0xf6e <pow+0x6e>
     f1c:	68 94       	set
     f1e:	90 38       	cpi	r25, 0x80	; 128
     f20:	81 05       	cpc	r24, r1
     f22:	61 f0       	breq	.+24     	; 0xf3c <pow+0x3c>
     f24:	80 38       	cpi	r24, 0x80	; 128
     f26:	bf ef       	ldi	r27, 0xFF	; 255
     f28:	9b 07       	cpc	r25, r27
     f2a:	41 f0       	breq	.+16     	; 0xf3c <pow+0x3c>
     f2c:	99 23       	and	r25, r25
     f2e:	4a f5       	brpl	.+82     	; 0xf82 <pow+0x82>
     f30:	ff 3f       	cpi	r31, 0xFF	; 255
     f32:	e1 05       	cpc	r30, r1
     f34:	31 05       	cpc	r19, r1
     f36:	21 05       	cpc	r18, r1
     f38:	19 f1       	breq	.+70     	; 0xf80 <pow+0x80>
     f3a:	e8 94       	clt
     f3c:	08 94       	sec
     f3e:	e7 95       	ror	r30
     f40:	d9 01       	movw	r26, r18
     f42:	aa 23       	and	r26, r26
     f44:	29 f4       	brne	.+10     	; 0xf50 <pow+0x50>
     f46:	ab 2f       	mov	r26, r27
     f48:	be 2f       	mov	r27, r30
     f4a:	f8 5f       	subi	r31, 0xF8	; 248
     f4c:	d0 f3       	brcs	.-12     	; 0xf42 <pow+0x42>
     f4e:	10 c0       	rjmp	.+32     	; 0xf70 <pow+0x70>
     f50:	ff 5f       	subi	r31, 0xFF	; 255
     f52:	70 f4       	brcc	.+28     	; 0xf70 <pow+0x70>
     f54:	a6 95       	lsr	r26
     f56:	e0 f7       	brcc	.-8      	; 0xf50 <pow+0x50>
     f58:	f7 39       	cpi	r31, 0x97	; 151
     f5a:	50 f0       	brcs	.+20     	; 0xf70 <pow+0x70>
     f5c:	19 f0       	breq	.+6      	; 0xf64 <pow+0x64>
     f5e:	ff 3a       	cpi	r31, 0xAF	; 175
     f60:	38 f4       	brcc	.+14     	; 0xf70 <pow+0x70>
     f62:	9f 77       	andi	r25, 0x7F	; 127
     f64:	9f 93       	push	r25
     f66:	0d d0       	rcall	.+26     	; 0xf82 <pow+0x82>
     f68:	0f 90       	pop	r0
     f6a:	07 fc       	sbrc	r0, 7
     f6c:	90 58       	subi	r25, 0x80	; 128
     f6e:	08 95       	ret
     f70:	46 f0       	brts	.+16     	; 0xf82 <pow+0x82>
     f72:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	9f e3       	ldi	r25, 0x3F	; 63
     f7e:	08 95       	ret
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	9f 77       	andi	r25, 0x7F	; 127
     f84:	5f 93       	push	r21
     f86:	4f 93       	push	r20
     f88:	3f 93       	push	r19
     f8a:	2f 93       	push	r18
     f8c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <log>
     f90:	2f 91       	pop	r18
     f92:	3f 91       	pop	r19
     f94:	4f 91       	pop	r20
     f96:	5f 91       	pop	r21
     f98:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__mulsf3>
     f9c:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <exp>
     fa0:	29 f4       	brne	.+10     	; 0xfac <pow+0xac>
     fa2:	16 f0       	brts	.+4      	; 0xfa8 <pow+0xa8>
     fa4:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
     fa8:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_zero>
     fac:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>

00000fb0 <exp>:
     fb0:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_splitA>
     fb4:	a8 f3       	brcs	.-22     	; 0xfa0 <pow+0xa0>
     fb6:	96 38       	cpi	r25, 0x86	; 134
     fb8:	a0 f7       	brcc	.-24     	; 0xfa2 <pow+0xa2>
     fba:	07 f8       	bld	r0, 7
     fbc:	0f 92       	push	r0
     fbe:	e8 94       	clt
     fc0:	2b e3       	ldi	r18, 0x3B	; 59
     fc2:	3a ea       	ldi	r19, 0xAA	; 170
     fc4:	48 eb       	ldi	r20, 0xB8	; 184
     fc6:	5f e7       	ldi	r21, 0x7F	; 127
     fc8:	0e 94 0d 09 	call	0x121a	; 0x121a <__mulsf3_pse>
     fcc:	0f 92       	push	r0
     fce:	0f 92       	push	r0
     fd0:	0f 92       	push	r0
     fd2:	4d b7       	in	r20, 0x3d	; 61
     fd4:	5e b7       	in	r21, 0x3e	; 62
     fd6:	0f 92       	push	r0
     fd8:	0e 94 c3 08 	call	0x1186	; 0x1186 <modf>
     fdc:	e4 e5       	ldi	r30, 0x54	; 84
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_powser>
     fe4:	4f 91       	pop	r20
     fe6:	5f 91       	pop	r21
     fe8:	ef 91       	pop	r30
     fea:	ff 91       	pop	r31
     fec:	e5 95       	asr	r30
     fee:	ee 1f       	adc	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	49 f0       	breq	.+18     	; 0x1006 <exp+0x56>
     ff4:	fe 57       	subi	r31, 0x7E	; 126
     ff6:	e0 68       	ori	r30, 0x80	; 128
     ff8:	44 27       	eor	r20, r20
     ffa:	ee 0f       	add	r30, r30
     ffc:	44 1f       	adc	r20, r20
     ffe:	fa 95       	dec	r31
    1000:	e1 f7       	brne	.-8      	; 0xffa <exp+0x4a>
    1002:	41 95       	neg	r20
    1004:	55 0b       	sbc	r21, r21
    1006:	0e 94 3d 08 	call	0x107a	; 0x107a <ldexp>
    100a:	0f 90       	pop	r0
    100c:	07 fe       	sbrs	r0, 7
    100e:	0c 94 31 08 	jmp	0x1062	; 0x1062 <inverse>
    1012:	08 95       	ret

00001014 <__fp_powser>:
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	1f 93       	push	r17
    101a:	0f 93       	push	r16
    101c:	ff 92       	push	r15
    101e:	ef 92       	push	r14
    1020:	df 92       	push	r13
    1022:	7b 01       	movw	r14, r22
    1024:	8c 01       	movw	r16, r24
    1026:	68 94       	set
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <__fp_powser+0x22>
    102a:	da 2e       	mov	r13, r26
    102c:	ef 01       	movw	r28, r30
    102e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__mulsf3x>
    1032:	fe 01       	movw	r30, r28
    1034:	e8 94       	clt
    1036:	a5 91       	lpm	r26, Z+
    1038:	25 91       	lpm	r18, Z+
    103a:	35 91       	lpm	r19, Z+
    103c:	45 91       	lpm	r20, Z+
    103e:	55 91       	lpm	r21, Z+
    1040:	a6 f3       	brts	.-24     	; 0x102a <__fp_powser+0x16>
    1042:	ef 01       	movw	r28, r30
    1044:	0e 94 67 06 	call	0xcce	; 0xcce <__addsf3x>
    1048:	fe 01       	movw	r30, r28
    104a:	97 01       	movw	r18, r14
    104c:	a8 01       	movw	r20, r16
    104e:	da 94       	dec	r13
    1050:	69 f7       	brne	.-38     	; 0x102c <__fp_powser+0x18>
    1052:	df 90       	pop	r13
    1054:	ef 90       	pop	r14
    1056:	ff 90       	pop	r15
    1058:	0f 91       	pop	r16
    105a:	1f 91       	pop	r17
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <inverse>:
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	9f e3       	ldi	r25, 0x3F	; 63
    106e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__divsf3>
    1072:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
    1076:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_mpack>

0000107a <ldexp>:
    107a:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_splitA>
    107e:	d8 f3       	brcs	.-10     	; 0x1076 <inverse+0x14>
    1080:	99 23       	and	r25, r25
    1082:	c9 f3       	breq	.-14     	; 0x1076 <inverse+0x14>
    1084:	94 0f       	add	r25, r20
    1086:	51 1d       	adc	r21, r1
    1088:	a3 f3       	brvs	.-24     	; 0x1072 <inverse+0x10>
    108a:	91 50       	subi	r25, 0x01	; 1
    108c:	50 40       	sbci	r21, 0x00	; 0
    108e:	94 f0       	brlt	.+36     	; 0x10b4 <ldexp+0x3a>
    1090:	59 f0       	breq	.+22     	; 0x10a8 <ldexp+0x2e>
    1092:	88 23       	and	r24, r24
    1094:	32 f0       	brmi	.+12     	; 0x10a2 <ldexp+0x28>
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <ldexp+0x18>
    10a2:	9e 3f       	cpi	r25, 0xFE	; 254
    10a4:	51 05       	cpc	r21, r1
    10a6:	2c f7       	brge	.-54     	; 0x1072 <inverse+0x10>
    10a8:	88 0f       	add	r24, r24
    10aa:	91 1d       	adc	r25, r1
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	ac f0       	brlt	.+42     	; 0x10e2 <ldexp+0x68>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	9c f0       	brlt	.+38     	; 0x10e2 <ldexp+0x68>
    10bc:	bb 27       	eor	r27, r27
    10be:	86 95       	lsr	r24
    10c0:	77 95       	ror	r23
    10c2:	67 95       	ror	r22
    10c4:	b7 95       	ror	r27
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <ldexp+0x50>
    10c8:	b1 60       	ori	r27, 0x01	; 1
    10ca:	93 95       	inc	r25
    10cc:	c1 f7       	brne	.-16     	; 0x10be <ldexp+0x44>
    10ce:	bb 0f       	add	r27, r27
    10d0:	58 f7       	brcc	.-42     	; 0x10a8 <ldexp+0x2e>
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <ldexp+0x5e>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	e8 cf       	rjmp	.-48     	; 0x10a8 <ldexp+0x2e>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	e3 cf       	rjmp	.-58     	; 0x10a8 <ldexp+0x2e>
    10e2:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
    10e6:	16 f0       	brts	.+4      	; 0x10ec <ldexp+0x72>
    10e8:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_mpack>
    10ec:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
    10f0:	68 94       	set
    10f2:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>

000010f6 <log>:
    10f6:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_splitA>
    10fa:	a8 f3       	brcs	.-22     	; 0x10e6 <ldexp+0x6c>
    10fc:	99 23       	and	r25, r25
    10fe:	c1 f3       	breq	.-16     	; 0x10f0 <ldexp+0x76>
    1100:	ae f3       	brts	.-22     	; 0x10ec <ldexp+0x72>
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	1f 93       	push	r17
    1108:	0f 93       	push	r16
    110a:	ff 92       	push	r15
    110c:	c9 2f       	mov	r28, r25
    110e:	dd 27       	eor	r29, r29
    1110:	88 23       	and	r24, r24
    1112:	2a f0       	brmi	.+10     	; 0x111e <log+0x28>
    1114:	21 97       	sbiw	r28, 0x01	; 1
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	da f7       	brpl	.-10     	; 0x1114 <log+0x1e>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f eb       	ldi	r21, 0xBF	; 191
    1126:	9f e3       	ldi	r25, 0x3F	; 63
    1128:	88 39       	cpi	r24, 0x98	; 152
    112a:	20 f0       	brcs	.+8      	; 0x1134 <log+0x3e>
    112c:	80 3e       	cpi	r24, 0xE0	; 224
    112e:	38 f0       	brcs	.+14     	; 0x113e <log+0x48>
    1130:	21 96       	adiw	r28, 0x01	; 1
    1132:	8f 77       	andi	r24, 0x7F	; 127
    1134:	0e 94 50 06 	call	0xca0	; 0xca0 <__addsf3>
    1138:	ec e7       	ldi	r30, 0x7C	; 124
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <log+0x50>
    113e:	0e 94 50 06 	call	0xca0	; 0xca0 <__addsf3>
    1142:	e9 ea       	ldi	r30, 0xA9	; 169
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_powser>
    114a:	8b 01       	movw	r16, r22
    114c:	be 01       	movw	r22, r28
    114e:	ec 01       	movw	r28, r24
    1150:	fb 2e       	mov	r15, r27
    1152:	6f 57       	subi	r22, 0x7F	; 127
    1154:	71 09       	sbc	r23, r1
    1156:	75 95       	asr	r23
    1158:	77 1f       	adc	r23, r23
    115a:	88 0b       	sbc	r24, r24
    115c:	99 0b       	sbc	r25, r25
    115e:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
    1162:	28 e1       	ldi	r18, 0x18	; 24
    1164:	32 e7       	ldi	r19, 0x72	; 114
    1166:	41 e3       	ldi	r20, 0x31	; 49
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	0e 94 0a 09 	call	0x1214	; 0x1214 <__mulsf3x>
    116e:	af 2d       	mov	r26, r15
    1170:	98 01       	movw	r18, r16
    1172:	ae 01       	movw	r20, r28
    1174:	ff 90       	pop	r15
    1176:	0f 91       	pop	r16
    1178:	1f 91       	pop	r17
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	0e 94 67 06 	call	0xcce	; 0xcce <__addsf3x>
    1182:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>

00001186 <modf>:
    1186:	fa 01       	movw	r30, r20
    1188:	dc 01       	movw	r26, r24
    118a:	aa 0f       	add	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	bf 57       	subi	r27, 0x7F	; 127
    1194:	28 f4       	brcc	.+10     	; 0x11a0 <modf+0x1a>
    1196:	22 27       	eor	r18, r18
    1198:	33 27       	eor	r19, r19
    119a:	44 27       	eor	r20, r20
    119c:	50 78       	andi	r21, 0x80	; 128
    119e:	20 c0       	rjmp	.+64     	; 0x11e0 <modf+0x5a>
    11a0:	b7 51       	subi	r27, 0x17	; 23
    11a2:	90 f4       	brcc	.+36     	; 0x11c8 <modf+0x42>
    11a4:	ab 2f       	mov	r26, r27
    11a6:	00 24       	eor	r0, r0
    11a8:	46 95       	lsr	r20
    11aa:	37 95       	ror	r19
    11ac:	27 95       	ror	r18
    11ae:	01 1c       	adc	r0, r1
    11b0:	a3 95       	inc	r26
    11b2:	d2 f3       	brmi	.-12     	; 0x11a8 <modf+0x22>
    11b4:	00 20       	and	r0, r0
    11b6:	71 f0       	breq	.+28     	; 0x11d4 <modf+0x4e>
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	44 1f       	adc	r20, r20
    11be:	b3 95       	inc	r27
    11c0:	da f3       	brmi	.-10     	; 0x11b8 <modf+0x32>
    11c2:	0e d0       	rcall	.+28     	; 0x11e0 <modf+0x5a>
    11c4:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__subsf3>
    11c8:	61 30       	cpi	r22, 0x01	; 1
    11ca:	71 05       	cpc	r23, r1
    11cc:	a0 e8       	ldi	r26, 0x80	; 128
    11ce:	8a 07       	cpc	r24, r26
    11d0:	b9 46       	sbci	r27, 0x69	; 105
    11d2:	30 f4       	brcc	.+12     	; 0x11e0 <modf+0x5a>
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
    11d8:	66 27       	eor	r22, r22
    11da:	77 27       	eor	r23, r23
    11dc:	88 27       	eor	r24, r24
    11de:	90 78       	andi	r25, 0x80	; 128
    11e0:	30 96       	adiw	r30, 0x00	; 0
    11e2:	21 f0       	breq	.+8      	; 0x11ec <modf+0x66>
    11e4:	20 83       	st	Z, r18
    11e6:	31 83       	std	Z+1, r19	; 0x01
    11e8:	42 83       	std	Z+2, r20	; 0x02
    11ea:	53 83       	std	Z+3, r21	; 0x03
    11ec:	08 95       	ret

000011ee <__mulsf3>:
    11ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <__mulsf3x>
    11f2:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
    11f6:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
    11fa:	38 f0       	brcs	.+14     	; 0x120a <__mulsf3+0x1c>
    11fc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
    1200:	20 f0       	brcs	.+8      	; 0x120a <__mulsf3+0x1c>
    1202:	95 23       	and	r25, r21
    1204:	11 f0       	breq	.+4      	; 0x120a <__mulsf3+0x1c>
    1206:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
    120a:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>
    120e:	11 24       	eor	r1, r1
    1210:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>

00001214 <__mulsf3x>:
    1214:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
    1218:	70 f3       	brcs	.-36     	; 0x11f6 <__mulsf3+0x8>

0000121a <__mulsf3_pse>:
    121a:	95 9f       	mul	r25, r21
    121c:	c1 f3       	breq	.-16     	; 0x120e <__mulsf3+0x20>
    121e:	95 0f       	add	r25, r21
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	55 1f       	adc	r21, r21
    1224:	62 9f       	mul	r22, r18
    1226:	f0 01       	movw	r30, r0
    1228:	72 9f       	mul	r23, r18
    122a:	bb 27       	eor	r27, r27
    122c:	f0 0d       	add	r31, r0
    122e:	b1 1d       	adc	r27, r1
    1230:	63 9f       	mul	r22, r19
    1232:	aa 27       	eor	r26, r26
    1234:	f0 0d       	add	r31, r0
    1236:	b1 1d       	adc	r27, r1
    1238:	aa 1f       	adc	r26, r26
    123a:	64 9f       	mul	r22, r20
    123c:	66 27       	eor	r22, r22
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	66 1f       	adc	r22, r22
    1244:	82 9f       	mul	r24, r18
    1246:	22 27       	eor	r18, r18
    1248:	b0 0d       	add	r27, r0
    124a:	a1 1d       	adc	r26, r1
    124c:	62 1f       	adc	r22, r18
    124e:	73 9f       	mul	r23, r19
    1250:	b0 0d       	add	r27, r0
    1252:	a1 1d       	adc	r26, r1
    1254:	62 1f       	adc	r22, r18
    1256:	83 9f       	mul	r24, r19
    1258:	a0 0d       	add	r26, r0
    125a:	61 1d       	adc	r22, r1
    125c:	22 1f       	adc	r18, r18
    125e:	74 9f       	mul	r23, r20
    1260:	33 27       	eor	r19, r19
    1262:	a0 0d       	add	r26, r0
    1264:	61 1d       	adc	r22, r1
    1266:	23 1f       	adc	r18, r19
    1268:	84 9f       	mul	r24, r20
    126a:	60 0d       	add	r22, r0
    126c:	21 1d       	adc	r18, r1
    126e:	82 2f       	mov	r24, r18
    1270:	76 2f       	mov	r23, r22
    1272:	6a 2f       	mov	r22, r26
    1274:	11 24       	eor	r1, r1
    1276:	9f 57       	subi	r25, 0x7F	; 127
    1278:	50 40       	sbci	r21, 0x00	; 0
    127a:	9a f0       	brmi	.+38     	; 0x12a2 <__mulsf3_pse+0x88>
    127c:	f1 f0       	breq	.+60     	; 0x12ba <__mulsf3_pse+0xa0>
    127e:	88 23       	and	r24, r24
    1280:	4a f0       	brmi	.+18     	; 0x1294 <__mulsf3_pse+0x7a>
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	bb 1f       	adc	r27, r27
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	a9 f7       	brne	.-22     	; 0x127e <__mulsf3_pse+0x64>
    1294:	9e 3f       	cpi	r25, 0xFE	; 254
    1296:	51 05       	cpc	r21, r1
    1298:	80 f0       	brcs	.+32     	; 0x12ba <__mulsf3_pse+0xa0>
    129a:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
    129e:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
    12a2:	5f 3f       	cpi	r21, 0xFF	; 255
    12a4:	e4 f3       	brlt	.-8      	; 0x129e <__mulsf3_pse+0x84>
    12a6:	98 3e       	cpi	r25, 0xE8	; 232
    12a8:	d4 f3       	brlt	.-12     	; 0x129e <__mulsf3_pse+0x84>
    12aa:	86 95       	lsr	r24
    12ac:	77 95       	ror	r23
    12ae:	67 95       	ror	r22
    12b0:	b7 95       	ror	r27
    12b2:	f7 95       	ror	r31
    12b4:	e7 95       	ror	r30
    12b6:	9f 5f       	subi	r25, 0xFF	; 255
    12b8:	c1 f7       	brne	.-16     	; 0x12aa <__mulsf3_pse+0x90>
    12ba:	fe 2b       	or	r31, r30
    12bc:	88 0f       	add	r24, r24
    12be:	91 1d       	adc	r25, r1
    12c0:	96 95       	lsr	r25
    12c2:	87 95       	ror	r24
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__divsf3>:
    12c8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divsf3x>
    12cc:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__fp_round>
    12d0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscB>
    12d4:	58 f0       	brcs	.+22     	; 0x12ec <__divsf3+0x24>
    12d6:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_pscA>
    12da:	40 f0       	brcs	.+16     	; 0x12ec <__divsf3+0x24>
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <__divsf3+0x20>
    12de:	5f 3f       	cpi	r21, 0xFF	; 255
    12e0:	29 f0       	breq	.+10     	; 0x12ec <__divsf3+0x24>
    12e2:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
    12e6:	51 11       	cpse	r21, r1
    12e8:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
    12ec:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_nan>

000012f0 <__divsf3x>:
    12f0:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_split3>
    12f4:	68 f3       	brcs	.-38     	; 0x12d0 <__divsf3+0x8>

000012f6 <__divsf3_pse>:
    12f6:	99 23       	and	r25, r25
    12f8:	b1 f3       	breq	.-20     	; 0x12e6 <__divsf3+0x1e>
    12fa:	55 23       	and	r21, r21
    12fc:	91 f3       	breq	.-28     	; 0x12e2 <__divsf3+0x1a>
    12fe:	95 1b       	sub	r25, r21
    1300:	55 0b       	sbc	r21, r21
    1302:	bb 27       	eor	r27, r27
    1304:	aa 27       	eor	r26, r26
    1306:	62 17       	cp	r22, r18
    1308:	73 07       	cpc	r23, r19
    130a:	84 07       	cpc	r24, r20
    130c:	38 f0       	brcs	.+14     	; 0x131c <__divsf3_pse+0x26>
    130e:	9f 5f       	subi	r25, 0xFF	; 255
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	44 1f       	adc	r20, r20
    1318:	aa 1f       	adc	r26, r26
    131a:	a9 f3       	breq	.-22     	; 0x1306 <__divsf3_pse+0x10>
    131c:	35 d0       	rcall	.+106    	; 0x1388 <__divsf3_pse+0x92>
    131e:	0e 2e       	mov	r0, r30
    1320:	3a f0       	brmi	.+14     	; 0x1330 <__divsf3_pse+0x3a>
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	32 d0       	rcall	.+100    	; 0x138a <__divsf3_pse+0x94>
    1326:	91 50       	subi	r25, 0x01	; 1
    1328:	50 40       	sbci	r21, 0x00	; 0
    132a:	e6 95       	lsr	r30
    132c:	00 1c       	adc	r0, r0
    132e:	ca f7       	brpl	.-14     	; 0x1322 <__divsf3_pse+0x2c>
    1330:	2b d0       	rcall	.+86     	; 0x1388 <__divsf3_pse+0x92>
    1332:	fe 2f       	mov	r31, r30
    1334:	29 d0       	rcall	.+82     	; 0x1388 <__divsf3_pse+0x92>
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	bb 1f       	adc	r27, r27
    133e:	26 17       	cp	r18, r22
    1340:	37 07       	cpc	r19, r23
    1342:	48 07       	cpc	r20, r24
    1344:	ab 07       	cpc	r26, r27
    1346:	b0 e8       	ldi	r27, 0x80	; 128
    1348:	09 f0       	breq	.+2      	; 0x134c <__divsf3_pse+0x56>
    134a:	bb 0b       	sbc	r27, r27
    134c:	80 2d       	mov	r24, r0
    134e:	bf 01       	movw	r22, r30
    1350:	ff 27       	eor	r31, r31
    1352:	93 58       	subi	r25, 0x83	; 131
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	3a f0       	brmi	.+14     	; 0x1366 <__divsf3_pse+0x70>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	78 f0       	brcs	.+30     	; 0x137c <__divsf3_pse+0x86>
    135e:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_inf>
    1362:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__divsf3_pse+0x6c>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__divsf3_pse+0x6c>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9f 5f       	subi	r25, 0xFF	; 255
    137a:	c9 f7       	brne	.-14     	; 0x136e <__divsf3_pse+0x78>
    137c:	88 0f       	add	r24, r24
    137e:	91 1d       	adc	r25, r1
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret
    1388:	e1 e0       	ldi	r30, 0x01	; 1
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	bb 1f       	adc	r27, r27
    1392:	62 17       	cp	r22, r18
    1394:	73 07       	cpc	r23, r19
    1396:	84 07       	cpc	r24, r20
    1398:	ba 07       	cpc	r27, r26
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__divsf3_pse+0xae>
    139c:	62 1b       	sub	r22, r18
    139e:	73 0b       	sbc	r23, r19
    13a0:	84 0b       	sbc	r24, r20
    13a2:	ba 0b       	sbc	r27, r26
    13a4:	ee 1f       	adc	r30, r30
    13a6:	88 f7       	brcc	.-30     	; 0x138a <__divsf3_pse+0x94>
    13a8:	e0 95       	com	r30
    13aa:	08 95       	ret

000013ac <__fp_mpack>:
    13ac:	9f 3f       	cpi	r25, 0xFF	; 255
    13ae:	31 f0       	breq	.+12     	; 0x13bc <__fp_mpack_finite+0xc>

000013b0 <__fp_mpack_finite>:
    13b0:	91 50       	subi	r25, 0x01	; 1
    13b2:	20 f4       	brcc	.+8      	; 0x13bc <__fp_mpack_finite+0xc>
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	88 0f       	add	r24, r24
    13be:	91 1d       	adc	r25, r1
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	97 f9       	bld	r25, 7
    13c6:	08 95       	ret

000013c8 <__divmodhi4>:
    13c8:	97 fb       	bst	r25, 7
    13ca:	07 2e       	mov	r0, r23
    13cc:	16 f4       	brtc	.+4      	; 0x13d2 <__divmodhi4+0xa>
    13ce:	00 94       	com	r0
    13d0:	07 d0       	rcall	.+14     	; 0x13e0 <__divmodhi4_neg1>
    13d2:	77 fd       	sbrc	r23, 7
    13d4:	09 d0       	rcall	.+18     	; 0x13e8 <__divmodhi4_neg2>
    13d6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__udivmodhi4>
    13da:	07 fc       	sbrc	r0, 7
    13dc:	05 d0       	rcall	.+10     	; 0x13e8 <__divmodhi4_neg2>
    13de:	3e f4       	brtc	.+14     	; 0x13ee <__divmodhi4_exit>

000013e0 <__divmodhi4_neg1>:
    13e0:	90 95       	com	r25
    13e2:	81 95       	neg	r24
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	08 95       	ret

000013e8 <__divmodhi4_neg2>:
    13e8:	70 95       	com	r23
    13ea:	61 95       	neg	r22
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255

000013ee <__divmodhi4_exit>:
    13ee:	08 95       	ret

000013f0 <__udivmodhi4>:
    13f0:	aa 1b       	sub	r26, r26
    13f2:	bb 1b       	sub	r27, r27
    13f4:	51 e1       	ldi	r21, 0x11	; 17
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <__udivmodhi4_ep>

000013f8 <__udivmodhi4_loop>:
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	a6 17       	cp	r26, r22
    13fe:	b7 07       	cpc	r27, r23
    1400:	10 f0       	brcs	.+4      	; 0x1406 <__udivmodhi4_ep>
    1402:	a6 1b       	sub	r26, r22
    1404:	b7 0b       	sbc	r27, r23

00001406 <__udivmodhi4_ep>:
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	5a 95       	dec	r21
    140c:	a9 f7       	brne	.-22     	; 0x13f8 <__udivmodhi4_loop>
    140e:	80 95       	com	r24
    1410:	90 95       	com	r25
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	08 95       	ret

00001418 <malloc>:
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	10 f4       	brcc	.+4      	; 0x1426 <malloc+0xe>
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	e0 91 ce 00 	lds	r30, 0x00CE
    142a:	f0 91 cf 00 	lds	r31, 0x00CF
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c0 e0       	ldi	r28, 0x00	; 0
    1434:	d0 e0       	ldi	r29, 0x00	; 0
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	11 f1       	breq	.+68     	; 0x147e <malloc+0x66>
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	48 17       	cp	r20, r24
    1440:	59 07       	cpc	r21, r25
    1442:	c0 f0       	brcs	.+48     	; 0x1474 <malloc+0x5c>
    1444:	48 17       	cp	r20, r24
    1446:	59 07       	cpc	r21, r25
    1448:	61 f4       	brne	.+24     	; 0x1462 <malloc+0x4a>
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	20 97       	sbiw	r28, 0x00	; 0
    1450:	19 f0       	breq	.+6      	; 0x1458 <malloc+0x40>
    1452:	9b 83       	std	Y+3, r25	; 0x03
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <malloc+0x96>
    1458:	90 93 cf 00 	sts	0x00CF, r25
    145c:	80 93 ce 00 	sts	0x00CE, r24
    1460:	26 c0       	rjmp	.+76     	; 0x14ae <malloc+0x96>
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	19 f0       	breq	.+6      	; 0x146e <malloc+0x56>
    1468:	42 17       	cp	r20, r18
    146a:	53 07       	cpc	r21, r19
    146c:	18 f4       	brcc	.+6      	; 0x1474 <malloc+0x5c>
    146e:	9a 01       	movw	r18, r20
    1470:	be 01       	movw	r22, r28
    1472:	df 01       	movw	r26, r30
    1474:	ef 01       	movw	r28, r30
    1476:	02 80       	ldd	r0, Z+2	; 0x02
    1478:	f3 81       	ldd	r31, Z+3	; 0x03
    147a:	e0 2d       	mov	r30, r0
    147c:	dc cf       	rjmp	.-72     	; 0x1436 <malloc+0x1e>
    147e:	21 15       	cp	r18, r1
    1480:	31 05       	cpc	r19, r1
    1482:	09 f1       	breq	.+66     	; 0x14c6 <malloc+0xae>
    1484:	28 1b       	sub	r18, r24
    1486:	39 0b       	sbc	r19, r25
    1488:	24 30       	cpi	r18, 0x04	; 4
    148a:	31 05       	cpc	r19, r1
    148c:	90 f4       	brcc	.+36     	; 0x14b2 <malloc+0x9a>
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	8d 91       	ld	r24, X+
    1492:	9c 91       	ld	r25, X
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	61 15       	cp	r22, r1
    1498:	71 05       	cpc	r23, r1
    149a:	21 f0       	breq	.+8      	; 0x14a4 <malloc+0x8c>
    149c:	fb 01       	movw	r30, r22
    149e:	93 83       	std	Z+3, r25	; 0x03
    14a0:	82 83       	std	Z+2, r24	; 0x02
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <malloc+0x94>
    14a4:	90 93 cf 00 	sts	0x00CF, r25
    14a8:	80 93 ce 00 	sts	0x00CE, r24
    14ac:	fd 01       	movw	r30, r26
    14ae:	32 96       	adiw	r30, 0x02	; 2
    14b0:	44 c0       	rjmp	.+136    	; 0x153a <malloc+0x122>
    14b2:	fd 01       	movw	r30, r26
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	81 93       	st	Z+, r24
    14ba:	91 93       	st	Z+, r25
    14bc:	22 50       	subi	r18, 0x02	; 2
    14be:	31 09       	sbc	r19, r1
    14c0:	2d 93       	st	X+, r18
    14c2:	3c 93       	st	X, r19
    14c4:	3a c0       	rjmp	.+116    	; 0x153a <malloc+0x122>
    14c6:	20 91 cc 00 	lds	r18, 0x00CC
    14ca:	30 91 cd 00 	lds	r19, 0x00CD
    14ce:	23 2b       	or	r18, r19
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <malloc+0xca>
    14d2:	20 91 62 00 	lds	r18, 0x0062
    14d6:	30 91 63 00 	lds	r19, 0x0063
    14da:	30 93 cd 00 	sts	0x00CD, r19
    14de:	20 93 cc 00 	sts	0x00CC, r18
    14e2:	20 91 60 00 	lds	r18, 0x0060
    14e6:	30 91 61 00 	lds	r19, 0x0061
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	41 f4       	brne	.+16     	; 0x1500 <malloc+0xe8>
    14f0:	2d b7       	in	r18, 0x3d	; 61
    14f2:	3e b7       	in	r19, 0x3e	; 62
    14f4:	40 91 64 00 	lds	r20, 0x0064
    14f8:	50 91 65 00 	lds	r21, 0x0065
    14fc:	24 1b       	sub	r18, r20
    14fe:	35 0b       	sbc	r19, r21
    1500:	e0 91 cc 00 	lds	r30, 0x00CC
    1504:	f0 91 cd 00 	lds	r31, 0x00CD
    1508:	e2 17       	cp	r30, r18
    150a:	f3 07       	cpc	r31, r19
    150c:	a0 f4       	brcc	.+40     	; 0x1536 <malloc+0x11e>
    150e:	2e 1b       	sub	r18, r30
    1510:	3f 0b       	sbc	r19, r31
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	78 f0       	brcs	.+30     	; 0x1536 <malloc+0x11e>
    1518:	ac 01       	movw	r20, r24
    151a:	4e 5f       	subi	r20, 0xFE	; 254
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	24 17       	cp	r18, r20
    1520:	35 07       	cpc	r19, r21
    1522:	48 f0       	brcs	.+18     	; 0x1536 <malloc+0x11e>
    1524:	4e 0f       	add	r20, r30
    1526:	5f 1f       	adc	r21, r31
    1528:	50 93 cd 00 	sts	0x00CD, r21
    152c:	40 93 cc 00 	sts	0x00CC, r20
    1530:	81 93       	st	Z+, r24
    1532:	91 93       	st	Z+, r25
    1534:	02 c0       	rjmp	.+4      	; 0x153a <malloc+0x122>
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	cf 01       	movw	r24, r30
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <free>:
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	09 f4       	brne	.+2      	; 0x1550 <free+0xe>
    154e:	8c c0       	rjmp	.+280    	; 0x1668 <free+0x126>
    1550:	fc 01       	movw	r30, r24
    1552:	32 97       	sbiw	r30, 0x02	; 2
    1554:	13 82       	std	Z+3, r1	; 0x03
    1556:	12 82       	std	Z+2, r1	; 0x02
    1558:	00 91 ce 00 	lds	r16, 0x00CE
    155c:	10 91 cf 00 	lds	r17, 0x00CF
    1560:	01 15       	cp	r16, r1
    1562:	11 05       	cpc	r17, r1
    1564:	81 f4       	brne	.+32     	; 0x1586 <free+0x44>
    1566:	20 81       	ld	r18, Z
    1568:	31 81       	ldd	r19, Z+1	; 0x01
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	20 91 cc 00 	lds	r18, 0x00CC
    1572:	30 91 cd 00 	lds	r19, 0x00CD
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	79 f5       	brne	.+94     	; 0x15da <free+0x98>
    157c:	f0 93 cd 00 	sts	0x00CD, r31
    1580:	e0 93 cc 00 	sts	0x00CC, r30
    1584:	71 c0       	rjmp	.+226    	; 0x1668 <free+0x126>
    1586:	d8 01       	movw	r26, r16
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	ae 17       	cp	r26, r30
    158e:	bf 07       	cpc	r27, r31
    1590:	50 f4       	brcc	.+20     	; 0x15a6 <free+0x64>
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	2d 91       	ld	r18, X+
    1596:	3c 91       	ld	r19, X
    1598:	13 97       	sbiw	r26, 0x03	; 3
    159a:	ad 01       	movw	r20, r26
    159c:	21 15       	cp	r18, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	09 f1       	breq	.+66     	; 0x15e4 <free+0xa2>
    15a2:	d9 01       	movw	r26, r18
    15a4:	f3 cf       	rjmp	.-26     	; 0x158c <free+0x4a>
    15a6:	9d 01       	movw	r18, r26
    15a8:	da 01       	movw	r26, r20
    15aa:	33 83       	std	Z+3, r19	; 0x03
    15ac:	22 83       	std	Z+2, r18	; 0x02
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	86 0f       	add	r24, r22
    15b4:	97 1f       	adc	r25, r23
    15b6:	82 17       	cp	r24, r18
    15b8:	93 07       	cpc	r25, r19
    15ba:	69 f4       	brne	.+26     	; 0x15d6 <free+0x94>
    15bc:	ec 01       	movw	r28, r24
    15be:	28 81       	ld	r18, Y
    15c0:	39 81       	ldd	r19, Y+1	; 0x01
    15c2:	26 0f       	add	r18, r22
    15c4:	37 1f       	adc	r19, r23
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	31 83       	std	Z+1, r19	; 0x01
    15cc:	20 83       	st	Z, r18
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	9b 81       	ldd	r25, Y+3	; 0x03
    15d2:	93 83       	std	Z+3, r25	; 0x03
    15d4:	82 83       	std	Z+2, r24	; 0x02
    15d6:	45 2b       	or	r20, r21
    15d8:	29 f4       	brne	.+10     	; 0x15e4 <free+0xa2>
    15da:	f0 93 cf 00 	sts	0x00CF, r31
    15de:	e0 93 ce 00 	sts	0x00CE, r30
    15e2:	42 c0       	rjmp	.+132    	; 0x1668 <free+0x126>
    15e4:	13 96       	adiw	r26, 0x03	; 3
    15e6:	fc 93       	st	X, r31
    15e8:	ee 93       	st	-X, r30
    15ea:	12 97       	sbiw	r26, 0x02	; 2
    15ec:	ed 01       	movw	r28, r26
    15ee:	49 91       	ld	r20, Y+
    15f0:	59 91       	ld	r21, Y+
    15f2:	9e 01       	movw	r18, r28
    15f4:	24 0f       	add	r18, r20
    15f6:	35 1f       	adc	r19, r21
    15f8:	e2 17       	cp	r30, r18
    15fa:	f3 07       	cpc	r31, r19
    15fc:	71 f4       	brne	.+28     	; 0x161a <free+0xd8>
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	84 0f       	add	r24, r20
    1604:	95 1f       	adc	r25, r21
    1606:	02 96       	adiw	r24, 0x02	; 2
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	13 96       	adiw	r26, 0x03	; 3
    1614:	9c 93       	st	X, r25
    1616:	8e 93       	st	-X, r24
    1618:	12 97       	sbiw	r26, 0x02	; 2
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	d8 01       	movw	r26, r16
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	8d 91       	ld	r24, X+
    1624:	9c 91       	ld	r25, X
    1626:	13 97       	sbiw	r26, 0x03	; 3
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	19 f0       	breq	.+6      	; 0x1632 <free+0xf0>
    162c:	f8 01       	movw	r30, r16
    162e:	8c 01       	movw	r16, r24
    1630:	f6 cf       	rjmp	.-20     	; 0x161e <free+0xdc>
    1632:	8d 91       	ld	r24, X+
    1634:	9c 91       	ld	r25, X
    1636:	98 01       	movw	r18, r16
    1638:	2e 5f       	subi	r18, 0xFE	; 254
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	82 0f       	add	r24, r18
    163e:	93 1f       	adc	r25, r19
    1640:	20 91 cc 00 	lds	r18, 0x00CC
    1644:	30 91 cd 00 	lds	r19, 0x00CD
    1648:	28 17       	cp	r18, r24
    164a:	39 07       	cpc	r19, r25
    164c:	69 f4       	brne	.+26     	; 0x1668 <free+0x126>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	29 f4       	brne	.+10     	; 0x165c <free+0x11a>
    1652:	10 92 cf 00 	sts	0x00CF, r1
    1656:	10 92 ce 00 	sts	0x00CE, r1
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <free+0x11e>
    165c:	13 82       	std	Z+3, r1	; 0x03
    165e:	12 82       	std	Z+2, r1	; 0x02
    1660:	10 93 cd 00 	sts	0x00CD, r17
    1664:	00 93 cc 00 	sts	0x00CC, r16
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
